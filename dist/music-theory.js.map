{
  "version": 3,
  "sources": ["../js/games/music-theory.ts"],
  "sourcesContent": ["/**\n * music-theory game logic\n * Migrated from music-theory.html\n */\n\n// Import utilities\nimport { setCookie, getCookie } from '../storage-utils';\n\n// Declare globals that might be used\ndeclare const window: any;\ndeclare const document: any;\n\ninterface NotePosition {\n    note: string;\n    y: number;\n    line: boolean;\n    octave: number;\n}\n\ninterface IntervalData {\n    name: string;\n    semitones: number;\n    baseNote?: string;\n}\n\ninterface ChordData {\n    name: string;\n    notes: number[];\n    baseNote?: string;\n}\n\ninterface RhythmPattern {\n    name: string;\n    rhythm: number[];\n    notes: (string | null)[];\n}\n\nclass MusicTraining {\n    private setupScreen!: HTMLElement;\n    private gameScreen!: HTMLElement;\n    private resultsScreen!: HTMLElement;\n    private exerciseButtons!: NodeListOf<Element>;\n    private timeLimitSlider!: HTMLInputElement;\n    private timeDisplay!: HTMLElement;\n    private assistedModeCheckbox!: HTMLInputElement;\n    private startBtn!: HTMLButtonElement;\n    private timer!: HTMLElement;\n    private problemCounter!: HTMLElement;\n    private accuracy!: HTMLElement;\n    private progressFill!: HTMLElement;\n    private musicProblem!: HTMLElement;\n    private answerOptions!: HTMLElement;\n    private skipBtn!: HTMLButtonElement;\n    private playNoteBtn!: HTMLButtonElement;\n    private playAgainBtn!: HTMLButtonElement;\n    private shareScoreBtn!: HTMLButtonElement;\n    private feedbackOverlay!: HTMLElement;\n\n    private audioContext: AudioContext | null;\n    private timeLeft: number;\n    private currentProblem: number;\n    private correctAnswers: number;\n    private totalProblems: number;\n    private startTime: number | null;\n    private problemStartTime: number | null;\n    private responseTimes: number[];\n    private gameActive: boolean;\n    private currentAnswer: string | null;\n    private currentNote: string | null;\n    private hintTimer: number | null;\n    private assistedMode: boolean;\n    private selectedExercise: string;\n    private correctAnswerButton: HTMLButtonElement | null;\n    private currentInterval: IntervalData | null;\n    private intervalNotes: number[] | null;\n    private currentChord: ChordData | null;\n    private chordNotes: number[] | null;\n    private currentPattern: RhythmPattern | null;\n    private rhythmPattern: RhythmPattern | null;\n    private gameTimer: number | null;\n\n    constructor() {\n        this.audioContext = null;\n        this.timeLeft = 60;\n        this.currentProblem = 0;\n        this.correctAnswers = 0;\n        this.totalProblems = 0;\n        this.startTime = null;\n        this.problemStartTime = null;\n        this.responseTimes = [];\n        this.gameActive = false;\n        this.currentAnswer = null;\n        this.currentNote = null;\n        this.hintTimer = null;\n        this.assistedMode = false;\n        this.selectedExercise = 'note-recognition';\n        this.correctAnswerButton = null;\n        this.currentInterval = null;\n        this.intervalNotes = null;\n        this.currentChord = null;\n        this.chordNotes = null;\n        this.currentPattern = null;\n        this.rhythmPattern = null;\n        this.gameTimer = null;\n\n        this.setupElements();\n        this.resetGame();\n        this.bindEvents();\n        this.setupAudio();\n    }\n\n    setupElements(): void {\n        this.setupScreen = document.getElementById('setupScreen')!;\n        this.gameScreen = document.getElementById('gameScreen')!;\n        this.resultsScreen = document.getElementById('resultsScreen')!;\n        this.exerciseButtons = document.querySelectorAll('.exercise-btn');\n        this.timeLimitSlider = document.getElementById('timeLimit') as HTMLInputElement;\n        this.timeDisplay = document.getElementById('timeDisplay')!;\n        this.assistedModeCheckbox = document.getElementById('assistedMode') as HTMLInputElement;\n        this.startBtn = document.getElementById('startBtn') as HTMLButtonElement;\n        this.timer = document.getElementById('timer')!;\n        this.problemCounter = document.getElementById('problemCounter')!;\n        this.accuracy = document.getElementById('accuracy')!;\n        this.progressFill = document.getElementById('progressFill')!;\n        this.musicProblem = document.getElementById('musicProblem')!;\n        this.answerOptions = document.getElementById('answerOptions')!;\n        this.skipBtn = document.getElementById('skipBtn') as HTMLButtonElement;\n        this.playNoteBtn = document.getElementById('playNoteBtn') as HTMLButtonElement;\n        this.playAgainBtn = document.getElementById('playAgainBtn') as HTMLButtonElement;\n        this.shareScoreBtn = document.getElementById('shareScoreBtn') as HTMLButtonElement;\n        this.feedbackOverlay = document.getElementById('feedbackOverlay')!;\n    }\n\n    setupAudio(): void {\n        // Create audio context for sound effects and note playback\n        try {\n            this.audioContext = new (window.AudioContext || window.webkitAudioContext)();\n        } catch (e) {\n            this.audioContext = null;\n        }\n    }\n\n    playSound(frequency: number, duration: number, volume: number = 0.1): void {\n                if (!this.audioContext) return;\n\n                try {\n                    const oscillator = this.audioContext.createOscillator();\n                    const gainNode = this.audioContext.createGain();\n\n                    oscillator.connect(gainNode);\n                    gainNode.connect(this.audioContext.destination);\n\n                    oscillator.frequency.value = frequency;\n                    oscillator.type = 'sine';\n\n                    gainNode.gain.setValueAtTime(0, this.audioContext.currentTime);\n                    gainNode.gain.linearRampToValueAtTime(volume, this.audioContext.currentTime + 0.01);\n                    gainNode.gain.exponentialRampToValueAtTime(0.001, this.audioContext.currentTime + duration);\n\n                    oscillator.start(this.audioContext.currentTime);\n                    oscillator.stop(this.audioContext.currentTime + duration);\n                } catch (e) {\n                    // Audio might not be supported\n                }\n            }\n\n    resetGame(): void {\n        this.timeLeft = parseInt(this.timeLimitSlider.value) || 60;\n        this.currentProblem = 0;\n        this.correctAnswers = 0;\n        this.totalProblems = 0;\n        this.startTime = null;\n        this.problemStartTime = null;\n        this.responseTimes = [];\n        this.gameActive = false;\n        this.currentAnswer = null;\n        this.currentNote = null;\n        this.hintTimer = null;\n        this.assistedMode = this.assistedModeCheckbox.checked;\n        const selectedBtn = document.querySelector('.exercise-btn.selected') as HTMLElement;\n        this.selectedExercise = selectedBtn?.dataset.exercise || 'note-recognition';\n    }\n\n    bindEvents(): void {\n        this.startBtn.addEventListener('click', () => this.startGame());\n        this.playAgainBtn.addEventListener('click', () => this.showSetup());\n        this.skipBtn.addEventListener('click', () => this.skipProblem());\n        this.playNoteBtn.addEventListener('click', () => this.playCurrentExercise());\n        this.shareScoreBtn.addEventListener('click', () => this.shareScore());\n\n        // Exercise button selection\n        this.exerciseButtons.forEach((btn: Element) => {\n            btn.addEventListener('click', () => {\n                this.exerciseButtons.forEach((b: Element) => b.classList.remove('selected'));\n                btn.classList.add('selected');\n            });\n        });\n\n        // Time slider update\n        this.timeLimitSlider.addEventListener('input', () => {\n            this.timeDisplay.textContent = `${this.timeLimitSlider.value}s`;\n        });\n    }\n\n    getNoteFrequency(note: string): number {\n        const frequencies: { [key: string]: number } = {\n            'C4': 261.63, 'D4': 293.66, 'E4': 329.63, 'F4': 349.23,\n            'G4': 392.00, 'A4': 440.00, 'B4': 493.88,\n            'C5': 523.25, 'D5': 587.33, 'E5': 659.25, 'F5': 698.46,\n            'G5': 783.99, 'A5': 880.00, 'B5': 987.77\n        };\n        return frequencies[note] || 440;\n    }\n\n    generateNoteRecognitionProblem(): NotePosition {\n                // Treble clef note positions (from top to bottom) - fine-tuned for proper centering\n                const positions = [\n                    { note: 'G', y: -22.5, line: false, octave: 5 },  // Above staff\n                    { note: 'F', y: -10, line: true, octave: 5 },     // Top line (5th line)\n                    { note: 'E', y: 2.5, line: false, octave: 5 },    // Space below 5th line\n                    { note: 'D', y: 15, line: true, octave: 5 },      // 4th line\n                    { note: 'C', y: 27.5, line: false, octave: 5 },   // Space below 4th line\n                    { note: 'B', y: 40, line: true, octave: 4 },      // 3rd line (middle)\n                    { note: 'A', y: 52.5, line: false, octave: 4 },   // Space below 3rd line\n                    { note: 'G', y: 65, line: true, octave: 4 },      // 2nd line\n                    { note: 'F', y: 77.5, line: false, octave: 4 },   // Space below 2nd line\n                    { note: 'E', y: 90, line: true, octave: 4 },      // 1st line (bottom)\n                    { note: 'D', y: 102.5, line: false, octave: 4 }   // Below staff\n                ];\n\n                const position = positions[Math.floor(Math.random() * positions.length)];\n                this.currentNote = position.note + position.octave;\n                this.currentAnswer = position.note;\n\n                return position;\n            }\n\n    generateIntervalProblem(): IntervalData {\n                // Random starting notes for variety\n                const baseNotes = ['C4', 'D4', 'E4', 'F4', 'G4', 'A4', 'B4', 'C5'];\n                const randomBase = baseNotes[Math.floor(Math.random() * baseNotes.length)];\n\n                // Simple intervals for beginners\n                const intervals = [\n                    { name: 'Same Note', semitones: 0 },\n                    { name: 'Next Door Up', semitones: 2 }, // Major 2nd\n                    { name: 'Skip One Up', semitones: 4 },  // Major 3rd\n                    { name: 'Far Apart', semitones: 7 }     // Perfect 5th\n                ];\n\n                const interval = intervals[Math.floor(Math.random() * intervals.length)];\n                this.currentInterval = { ...interval, baseNote: randomBase };\n                this.currentAnswer = interval.name;\n\n                // Set up the two notes for playback\n                const baseFreq = this.getNoteFrequency(randomBase);\n                const secondFreq = baseFreq * Math.pow(2, interval.semitones / 12);\n                this.intervalNotes = [baseFreq, secondFreq];\n\n                return this.currentInterval;\n            }\n\n    generateChordProblem(): ChordData {\n                // Random starting notes for variety\n                const baseNotes = ['C4', 'D4', 'E4', 'F4', 'G4', 'A4', 'B4'];\n                const randomBase = baseNotes[Math.floor(Math.random() * baseNotes.length)];\n\n                // Simple chords for beginners\n                const chords = [\n                    { name: 'Happy Sound', notes: [0, 4, 7] },    // Major\n                    { name: 'Sad Sound', notes: [0, 3, 7] },     // Minor\n                ];\n\n                const chord = chords[Math.floor(Math.random() * chords.length)];\n                this.currentChord = { ...chord, baseNote: randomBase };\n                this.currentAnswer = chord.name;\n\n                // Set up chord notes for playback\n                const baseFreq = this.getNoteFrequency(randomBase);\n                this.chordNotes = chord.notes.map(semitone =>\n                    baseFreq * Math.pow(2, semitone / 12)\n                );\n\n                return this.currentChord;\n            }\n\n    generateScaleProblem(): RhythmPattern {\n                // Random notes and instruments for variety\n                const notes = ['C4', 'D4', 'E4', 'F4', 'G4', 'A4', 'B4', 'C5'];\n                const randomNote = notes[Math.floor(Math.random() * notes.length)];\n\n                // Different rhythm patterns with varying notes\n                const patterns = [\n                    {\n                        name: 'Slow Beat',\n                        rhythm: [500, 500, 500, 500],\n                        notes: [randomNote, randomNote, randomNote, randomNote]\n                    },\n                    {\n                        name: 'Fast Beat',\n                        rhythm: [250, 250, 250, 250],\n                        notes: [randomNote, randomNote, randomNote, randomNote]\n                    },\n                    {\n                        name: 'Long-Short',\n                        rhythm: [750, 250, 750, 250],\n                        notes: [randomNote, randomNote, randomNote, randomNote]\n                    },\n                    {\n                        name: 'Skip Beat',\n                        rhythm: [500, 0, 500, 500],\n                        notes: [randomNote, null, randomNote, randomNote]\n                    },\n                    {\n                        name: 'Up and Down',\n                        rhythm: [400, 400, 400, 400],\n                        notes: this.generateMelodyPattern(randomNote)\n                    },\n                    {\n                        name: 'Bouncy Beat',\n                        rhythm: [300, 150, 300, 150, 300],\n                        notes: this.generateBouncyPattern(randomNote)\n                    }\n                ];\n\n                const pattern = patterns[Math.floor(Math.random() * patterns.length)];\n                this.currentPattern = pattern;\n                this.currentAnswer = pattern.name;\n\n                // Set up rhythm for playback\n                this.rhythmPattern = pattern;\n\n                return pattern;\n            }\n\n    generateMelodyPattern(baseNote: string): (string | null)[] {\n                const baseIndex = ['C4', 'D4', 'E4', 'F4', 'G4', 'A4', 'B4', 'C5'].indexOf(baseNote);\n                const notes = ['C4', 'D4', 'E4', 'F4', 'G4', 'A4', 'B4', 'C5'];\n\n                // Create a simple up-down melody\n                return [\n                    notes[baseIndex],\n                    notes[Math.min(baseIndex + 1, notes.length - 1)],\n                    notes[Math.min(baseIndex + 2, notes.length - 1)],\n                    notes[baseIndex]\n                ];\n            }\n\n    generateBouncyPattern(baseNote: string): (string | null)[] {\n                const baseIndex = ['C4', 'D4', 'E4', 'F4', 'G4', 'A4', 'B4', 'C5'].indexOf(baseNote);\n                const notes = ['C4', 'D4', 'E4', 'F4', 'G4', 'A4', 'B4', 'C5'];\n\n                // Create a bouncy pattern\n                return [\n                    notes[baseIndex],\n                    notes[Math.min(baseIndex + 2, notes.length - 1)],\n                    notes[baseIndex],\n                    notes[Math.min(baseIndex + 2, notes.length - 1)],\n                    notes[baseIndex]\n                ];\n            }\n\n    generateOptions(correctAnswer: string, type: string): string[] {\n        let allOptions: string[] = [];\n\n                switch (type) {\n                    case 'note-recognition':\n                        allOptions = ['C', 'D', 'E', 'F', 'G', 'A', 'B'];\n                        break;\n                    case 'interval-recognition':\n                        allOptions = ['Same Note', 'Next Door Up', 'Skip One Up', 'Far Apart'];\n                        break;\n                    case 'chord-recognition':\n                        allOptions = ['Happy Sound', 'Sad Sound'];\n                        break;\n                    case 'scale-patterns':\n                        allOptions = ['Slow Beat', 'Fast Beat', 'Long-Short', 'Skip Beat', 'Up and Down', 'Bouncy Beat'];\n                        break;\n                }\n\n                // Ensure correct answer is included\n                const options = [correctAnswer];\n\n                // Add random wrong answers\n                while (options.length < 4 && options.length < allOptions.length) {\n                    const option = allOptions[Math.floor(Math.random() * allOptions.length)];\n                    if (!options.includes(option)) {\n                        options.push(option);\n                    }\n                }\n\n                // Shuffle options\n                return options.sort(() => Math.random() - 0.5);\n            }\n\n    showProblem(): void {\n        let problemData: NotePosition | IntervalData | ChordData | RhythmPattern;\n        let problemHTML = '';\n\n        switch (this.selectedExercise) {\n            case 'note-recognition':\n                problemData = this.generateNoteRecognitionProblem();\n                problemHTML = this.createStaffHTML(problemData as NotePosition);\n                break;\n            case 'interval-recognition':\n                problemData = this.generateIntervalProblem();\n                problemHTML = `<div class=\"interval-display\">Listen to the interval and identify it</div>`;\n                break;\n            case 'chord-recognition':\n                problemData = this.generateChordProblem();\n                problemHTML = `<div class=\"chord-display\">Listen to the chord and identify its type</div>`;\n                break;\n            case 'scale-patterns':\n                problemData = this.generateScaleProblem();\n                problemHTML = `<div class=\"chord-display\">Listen to the scale and identify its type</div>`;\n                break;\n        }\n\n                this.musicProblem.innerHTML = problemHTML;\n\n                // Clear any existing hint timer\n                if (this.hintTimer) {\n                    clearTimeout(this.hintTimer);\n                    this.hintTimer = null;\n                }\n\n        // Generate multiple choice options\n        const options = this.generateOptions(this.currentAnswer!, this.selectedExercise);\n        this.answerOptions.innerHTML = '';\n\n        options.forEach((option: string, index: number) => {\n            const button = document.createElement('button');\n            button.className = 'answer-btn';\n            button.textContent = option;\n            button.addEventListener('click', () => this.selectAnswer(option, button));\n\n            // Store reference to correct answer button for assisted mode\n            if (option === this.currentAnswer) {\n                this.correctAnswerButton = button;\n            }\n\n            this.answerOptions.appendChild(button);\n        });\n\n                this.problemStartTime = Date.now();\n\n        // Start hint timer for assisted mode\n        if (this.assistedMode) {\n            this.hintTimer = setTimeout(() => {\n                if (this.correctAnswerButton && this.gameActive) {\n                    this.correctAnswerButton.classList.add('hint');\n                }\n            }, 3000) as unknown as number;\n        }\n\n                // Auto-play audio for all exercises\n                setTimeout(() => this.playCurrentExercise(), 500);\n            }\n\n    createStaffHTML(noteData: NotePosition): string {\n                const needsLedgerLine = noteData.y < 0 || noteData.y > 100;\n                const ledgerLineHTML = needsLedgerLine ?\n                    `<div class=\"staff-line\" style=\"top: ${noteData.y}%; width: 60px; left: 135px;\"></div>` : '';\n\n                return `\n                    <div class=\"staff\">\n                        <div class=\"staff-lines\">\n                            <div class=\"staff-line\"></div>\n                            <div class=\"staff-line\"></div>\n                            <div class=\"staff-line\"></div>\n                            <div class=\"staff-line\"></div>\n                            <div class=\"staff-line\"></div>\n                            ${ledgerLineHTML}\n                        </div>\n                        <div class=\"clef\">\uD834\uDD1E</div>\n                        <div class=\"note\" style=\"top: ${noteData.y}%;\">\n                            <div class=\"note-stem\"></div>\n                        </div>\n                    </div>\n                    <p style=\"font-size: 1.2em; margin-top: 20px;\">\uD83C\uDFB5 What letter name is this note?</p>\n                `;\n            }\n\n    playCurrentNote(): void {\n        if (!this.audioContext || !this.currentNote) return;\n\n        // Enable audio context on user interaction\n        if (this.audioContext.state === 'suspended') {\n            this.audioContext.resume();\n        }\n\n        const frequency = this.getNoteFrequency(this.currentNote);\n        this.playSound(frequency, 1, 0.3);\n    }\n\n    playCurrentExercise(): void {\n        if (!this.audioContext) return;\n\n        // Enable audio context on user interaction\n        if (this.audioContext.state === 'suspended') {\n            this.audioContext.resume();\n        }\n\n        switch (this.selectedExercise) {\n            case 'note-recognition':\n                this.playCurrentNote();\n                break;\n            case 'interval-recognition':\n                this.playInterval();\n                break;\n            case 'chord-recognition':\n                this.playChord();\n                break;\n            case 'scale-patterns':\n                this.playRhythm();\n                break;\n        }\n    }\n\n    playInterval(): void {\n        if (!this.intervalNotes) return;\n\n        // Play first note\n        this.playSound(this.intervalNotes[0], 0.8, 0.3);\n\n        // Play second note after a short delay\n        setTimeout(() => {\n            this.playSound(this.intervalNotes![1], 0.8, 0.3);\n        }, 900);\n    }\n\n    playChord(): void {\n        if (!this.chordNotes) return;\n\n        // Play all notes of the chord simultaneously\n        this.chordNotes.forEach((frequency: number) => {\n            this.playSound(frequency, 1.5, 0.2);\n        });\n    }\n\n    playRhythm(): void {\n        if (!this.rhythmPattern) return;\n\n        let currentTime = 0;\n\n        this.rhythmPattern.rhythm.forEach((duration: number, index: number) => {\n            if (duration > 0 && this.rhythmPattern!.notes[index]) {\n                const frequency = this.getNoteFrequency(this.rhythmPattern!.notes[index]!);\n                setTimeout(() => {\n                    this.playSound(frequency, duration / 1000 * 0.8, 0.3);\n                }, currentTime);\n            }\n            currentTime += duration;\n        });\n    }\n\n    selectAnswer(answer: string, button: HTMLButtonElement): void {\n                if (!this.gameActive) return;\n\n        // Clear hint timer and remove hint animation\n        if (this.hintTimer) {\n            clearTimeout(this.hintTimer);\n            this.hintTimer = null;\n        }\n        document.querySelectorAll('.answer-btn.hint').forEach((btn: Element) => {\n            btn.classList.remove('hint');\n        });\n\n        const isCorrect = answer === this.currentAnswer;\n        const responseTime = Date.now() - this.problemStartTime!;\n        this.responseTimes.push(responseTime);\n\n        // Visual feedback on button\n        button.classList.add(isCorrect ? 'correct' : 'incorrect');\n\n        // If wrong answer, highlight the correct one\n        if (!isCorrect && this.correctAnswerButton) {\n            setTimeout(() => {\n                this.correctAnswerButton!.classList.add('correct');\n            }, 300);\n        }\n\n        // Disable all buttons temporarily\n        const allButtons = this.answerOptions.querySelectorAll('.answer-btn');\n        allButtons.forEach((btn: Element) => (btn as HTMLElement).style.pointerEvents = 'none');\n\n                // Show overlay feedback\n                this.showFeedback(isCorrect);\n\n                // Play sound\n                if (isCorrect) {\n                    // Happy sound: rising tones\n                    this.playSound(523, 0.1); // C5\n                    setTimeout(() => this.playSound(659, 0.1), 100); // E5\n                    setTimeout(() => this.playSound(784, 0.2), 200); // G5\n                } else {\n                    // Error sound: descending buzz\n                    this.playSound(300, 0.1);\n                    setTimeout(() => this.playSound(250, 0.1), 100);\n                    setTimeout(() => this.playSound(200, 0.2), 200);\n                }\n\n                if (isCorrect) {\n                    this.correctAnswers++;\n                }\n\n                this.totalProblems++;\n                this.currentProblem++;\n                this.updateUI();\n\n                // Move to next problem after longer delay to show correct answer\n                setTimeout(() => {\n                    if (this.timeLeft > 0 && this.gameActive) {\n                        this.showProblem();\n                    }\n                }, isCorrect ? 800 : 1500); // Longer delay for wrong answers\n            }\n\n    showFeedback(isCorrect: boolean): void {\n        this.feedbackOverlay.textContent = isCorrect ? '\u266A Correct!' : '\u266B Wrong!';\n        this.feedbackOverlay.className = `feedback-overlay ${isCorrect ? 'correct' : 'incorrect'}`;\n\n        // Trigger animation by forcing reflow\n        this.feedbackOverlay.offsetHeight;\n\n        setTimeout(() => {\n            this.feedbackOverlay.className = 'feedback-overlay';\n        }, 600);\n    }\n\n    skipProblem(): void {\n        if (!this.gameActive) return;\n        this.totalProblems++;\n        this.currentProblem++;\n        this.responseTimes.push(10000); // Penalty time\n        this.updateUI();\n\n        if (this.timeLeft > 0) {\n            this.showProblem();\n        }\n    }\n\n    updateUI(): void {\n        const accuracy = this.totalProblems > 0 ? Math.round((this.correctAnswers / this.totalProblems) * 100) : 100;\n        this.accuracy.textContent = `${accuracy}%`;\n        this.problemCounter.textContent = `${this.currentProblem}`;\n\n        const progress = Math.min((this.currentProblem / 60) * 100, 100);\n        this.progressFill.style.width = `${progress}%`;\n    }\n\n    updateTimer(): void {\n        this.timer.textContent = this.timeLeft.toString();\n\n        if (this.timeLeft <= 10) {\n            this.timer.className = 'timer danger';\n        } else if (this.timeLeft <= 20) {\n            this.timer.className = 'timer warning';\n        } else {\n            this.timer.className = 'timer';\n        }\n\n        if (this.timeLeft <= 0) {\n            this.endGame();\n        } else {\n            this.timeLeft--;\n        }\n    }\n\n    calculateMusicAge(): number {\n                const accuracy = this.totalProblems > 0 ? (this.correctAnswers / this.totalProblems) : 0;\n                const avgResponseTime = this.responseTimes.length > 0 ?\n                    this.responseTimes.reduce((a, b) => a + b, 0) / this.responseTimes.length : 5000;\n\n        const multipliers: { [key: string]: number } = {\n            'note-recognition': 1.0,\n            'interval-recognition': 0.9,\n            'chord-recognition': 0.8,\n            'scale-patterns': 0.7\n        };\n        const exerciseMultiplier = multipliers[this.selectedExercise] || 1.0;\n\n                // Base age calculation (lower is better)\n                let musicAge = 20;\n\n                // Accuracy factor (0-100%)\n                musicAge += (1 - accuracy) * 40;\n\n                // Speed factor (response time in seconds)\n                musicAge += Math.min((avgResponseTime / 1000) * 5, 30);\n\n                // Exercise difficulty bonus\n                musicAge *= exerciseMultiplier;\n\n                // Problems solved bonus\n                musicAge -= Math.min(this.totalProblems * 0.2, 10);\n\n                return Math.max(8, Math.min(80, Math.round(musicAge)));\n            }\n\n    startGame(): void {\n        this.resetGame();\n        this.gameActive = true;\n        this.showScreen('game');\n\n        // Enable audio context on user interaction\n        if (this.audioContext && this.audioContext.state === 'suspended') {\n            this.audioContext.resume();\n        }\n\n        // Start countdown\n        this.gameTimer = setInterval(() => this.updateTimer(), 1000) as unknown as number;\n\n        // Show first problem\n        this.showProblem();\n    }\n\n    endGame(): void {\n        this.gameActive = false;\n        if (this.gameTimer !== null) {\n            clearInterval(this.gameTimer);\n        }\n\n                // Clear hint timer\n                if (this.hintTimer) {\n                    clearTimeout(this.hintTimer);\n                    this.hintTimer = null;\n                }\n\n                // Calculate results\n                const musicAge = this.calculateMusicAge();\n                const accuracy = this.totalProblems > 0 ? Math.round((this.correctAnswers / this.totalProblems) * 100) : 0;\n                const avgTime = this.responseTimes.length > 0 ?\n                    (this.responseTimes.reduce((a, b) => a + b, 0) / this.responseTimes.length / 1000).toFixed(1) : '0.0';\n\n        // Get exercise name\n        const exerciseNames: { [key: string]: string } = {\n            'note-recognition': 'Note Names',\n            'interval-recognition': 'Sound Distance',\n            'chord-recognition': 'Happy or Sad',\n            'scale-patterns': 'Beat Patterns'\n        };\n\n        // Show results\n        document.getElementById('musicAge')!.textContent = `Musical Age: ${musicAge}`;\n        document.getElementById('finalProblems')!.textContent = this.totalProblems.toString();\n        document.getElementById('finalAccuracy')!.textContent = `${accuracy}%`;\n        document.getElementById('avgTime')!.textContent = `${avgTime}s`;\n        document.getElementById('finalExercise')!.textContent = exerciseNames[this.selectedExercise] || 'Unknown';\n\n                this.showScreen('results');\n            }\n\n    shareScore(): void {\n        const musicAge = document.getElementById('musicAge')!.textContent;\n        const accuracy = document.getElementById('finalAccuracy')!.textContent;\n        const problems = document.getElementById('finalProblems')!.textContent;\n        const exercise = document.getElementById('finalExercise')!.textContent;\n\n        const shareText = `\uD83C\uDFB5 I just completed Music Theory Training!\\n${musicAge}, solved ${problems} ${exercise} problems with ${accuracy} accuracy!\\n\\nTry it yourself: ${window.location.href}`;\n\n        if (navigator.share) {\n            navigator.share({\n                title: 'Music Theory Training Results',\n                text: shareText\n            });\n        } else {\n            navigator.clipboard.writeText(shareText).then(() => {\n                alert('Score copied to clipboard!');\n            });\n        }\n    }\n\n    showScreen(screen: string): void {\n                this.setupScreen.classList.add('hidden');\n                this.gameScreen.classList.add('hidden');\n                this.resultsScreen.classList.add('hidden');\n\n                switch (screen) {\n                    case 'setup':\n                        this.setupScreen.classList.remove('hidden');\n                        break;\n                    case 'game':\n                        this.gameScreen.classList.remove('hidden');\n                        break;\n                    case 'results':\n                        this.resultsScreen.classList.remove('hidden');\n                        break;\n                }\n            }\n\n    showSetup(): void {\n        this.resetGame();\n        this.showScreen('setup');\n    }\n}\n\n// Initialize the game\nnew MusicTraining();\n\n// Export init function if it exists\nif (typeof window !== 'undefined') {\n  // Initialization code runs automatically\n}\n"],
  "mappings": ";;;AAqCA,MAAM,gBAAN,MAAoB;AAAA,IA4ChB,cAAc;AACV,WAAK,eAAe;AACpB,WAAK,WAAW;AAChB,WAAK,iBAAiB;AACtB,WAAK,iBAAiB;AACtB,WAAK,gBAAgB;AACrB,WAAK,YAAY;AACjB,WAAK,mBAAmB;AACxB,WAAK,gBAAgB,CAAC;AACtB,WAAK,aAAa;AAClB,WAAK,gBAAgB;AACrB,WAAK,cAAc;AACnB,WAAK,YAAY;AACjB,WAAK,eAAe;AACpB,WAAK,mBAAmB;AACxB,WAAK,sBAAsB;AAC3B,WAAK,kBAAkB;AACvB,WAAK,gBAAgB;AACrB,WAAK,eAAe;AACpB,WAAK,aAAa;AAClB,WAAK,iBAAiB;AACtB,WAAK,gBAAgB;AACrB,WAAK,YAAY;AAEjB,WAAK,cAAc;AACnB,WAAK,UAAU;AACf,WAAK,WAAW;AAChB,WAAK,WAAW;AAAA,IACpB;AAAA,IAEA,gBAAsB;AAClB,WAAK,cAAc,SAAS,eAAe,aAAa;AACxD,WAAK,aAAa,SAAS,eAAe,YAAY;AACtD,WAAK,gBAAgB,SAAS,eAAe,eAAe;AAC5D,WAAK,kBAAkB,SAAS,iBAAiB,eAAe;AAChE,WAAK,kBAAkB,SAAS,eAAe,WAAW;AAC1D,WAAK,cAAc,SAAS,eAAe,aAAa;AACxD,WAAK,uBAAuB,SAAS,eAAe,cAAc;AAClE,WAAK,WAAW,SAAS,eAAe,UAAU;AAClD,WAAK,QAAQ,SAAS,eAAe,OAAO;AAC5C,WAAK,iBAAiB,SAAS,eAAe,gBAAgB;AAC9D,WAAK,WAAW,SAAS,eAAe,UAAU;AAClD,WAAK,eAAe,SAAS,eAAe,cAAc;AAC1D,WAAK,eAAe,SAAS,eAAe,cAAc;AAC1D,WAAK,gBAAgB,SAAS,eAAe,eAAe;AAC5D,WAAK,UAAU,SAAS,eAAe,SAAS;AAChD,WAAK,cAAc,SAAS,eAAe,aAAa;AACxD,WAAK,eAAe,SAAS,eAAe,cAAc;AAC1D,WAAK,gBAAgB,SAAS,eAAe,eAAe;AAC5D,WAAK,kBAAkB,SAAS,eAAe,iBAAiB;AAAA,IACpE;AAAA,IAEA,aAAmB;AAEf,UAAI;AACA,aAAK,eAAe,KAAK,OAAO,gBAAgB,OAAO,oBAAoB;AAAA,MAC/E,SAAS,GAAG;AACR,aAAK,eAAe;AAAA,MACxB;AAAA,IACJ;AAAA,IAEA,UAAU,WAAmB,UAAkB,SAAiB,KAAW;AAC/D,UAAI,CAAC,KAAK,aAAc;AAExB,UAAI;AACA,cAAM,aAAa,KAAK,aAAa,iBAAiB;AACtD,cAAM,WAAW,KAAK,aAAa,WAAW;AAE9C,mBAAW,QAAQ,QAAQ;AAC3B,iBAAS,QAAQ,KAAK,aAAa,WAAW;AAE9C,mBAAW,UAAU,QAAQ;AAC7B,mBAAW,OAAO;AAElB,iBAAS,KAAK,eAAe,GAAG,KAAK,aAAa,WAAW;AAC7D,iBAAS,KAAK,wBAAwB,QAAQ,KAAK,aAAa,cAAc,IAAI;AAClF,iBAAS,KAAK,6BAA6B,MAAO,KAAK,aAAa,cAAc,QAAQ;AAE1F,mBAAW,MAAM,KAAK,aAAa,WAAW;AAC9C,mBAAW,KAAK,KAAK,aAAa,cAAc,QAAQ;AAAA,MAC5D,SAAS,GAAG;AAAA,MAEZ;AAAA,IACJ;AAAA,IAER,YAAkB;AACd,WAAK,WAAW,SAAS,KAAK,gBAAgB,KAAK,KAAK;AACxD,WAAK,iBAAiB;AACtB,WAAK,iBAAiB;AACtB,WAAK,gBAAgB;AACrB,WAAK,YAAY;AACjB,WAAK,mBAAmB;AACxB,WAAK,gBAAgB,CAAC;AACtB,WAAK,aAAa;AAClB,WAAK,gBAAgB;AACrB,WAAK,cAAc;AACnB,WAAK,YAAY;AACjB,WAAK,eAAe,KAAK,qBAAqB;AAC9C,YAAM,cAAc,SAAS,cAAc,wBAAwB;AACnE,WAAK,mBAAmB,aAAa,QAAQ,YAAY;AAAA,IAC7D;AAAA,IAEA,aAAmB;AACf,WAAK,SAAS,iBAAiB,SAAS,MAAM,KAAK,UAAU,CAAC;AAC9D,WAAK,aAAa,iBAAiB,SAAS,MAAM,KAAK,UAAU,CAAC;AAClE,WAAK,QAAQ,iBAAiB,SAAS,MAAM,KAAK,YAAY,CAAC;AAC/D,WAAK,YAAY,iBAAiB,SAAS,MAAM,KAAK,oBAAoB,CAAC;AAC3E,WAAK,cAAc,iBAAiB,SAAS,MAAM,KAAK,WAAW,CAAC;AAGpE,WAAK,gBAAgB,QAAQ,CAAC,QAAiB;AAC3C,YAAI,iBAAiB,SAAS,MAAM;AAChC,eAAK,gBAAgB,QAAQ,CAAC,MAAe,EAAE,UAAU,OAAO,UAAU,CAAC;AAC3E,cAAI,UAAU,IAAI,UAAU;AAAA,QAChC,CAAC;AAAA,MACL,CAAC;AAGD,WAAK,gBAAgB,iBAAiB,SAAS,MAAM;AACjD,aAAK,YAAY,cAAc,GAAG,KAAK,gBAAgB,KAAK;AAAA,MAChE,CAAC;AAAA,IACL;AAAA,IAEA,iBAAiB,MAAsB;AACnC,YAAM,cAAyC;AAAA,QAC3C,MAAM;AAAA,QAAQ,MAAM;AAAA,QAAQ,MAAM;AAAA,QAAQ,MAAM;AAAA,QAChD,MAAM;AAAA,QAAQ,MAAM;AAAA,QAAQ,MAAM;AAAA,QAClC,MAAM;AAAA,QAAQ,MAAM;AAAA,QAAQ,MAAM;AAAA,QAAQ,MAAM;AAAA,QAChD,MAAM;AAAA,QAAQ,MAAM;AAAA,QAAQ,MAAM;AAAA,MACtC;AACA,aAAO,YAAY,IAAI,KAAK;AAAA,IAChC;AAAA,IAEA,iCAA+C;AAEnC,YAAM,YAAY;AAAA,QACd,EAAE,MAAM,KAAK,GAAG,OAAO,MAAM,OAAO,QAAQ,EAAE;AAAA;AAAA,QAC9C,EAAE,MAAM,KAAK,GAAG,KAAK,MAAM,MAAM,QAAQ,EAAE;AAAA;AAAA,QAC3C,EAAE,MAAM,KAAK,GAAG,KAAK,MAAM,OAAO,QAAQ,EAAE;AAAA;AAAA,QAC5C,EAAE,MAAM,KAAK,GAAG,IAAI,MAAM,MAAM,QAAQ,EAAE;AAAA;AAAA,QAC1C,EAAE,MAAM,KAAK,GAAG,MAAM,MAAM,OAAO,QAAQ,EAAE;AAAA;AAAA,QAC7C,EAAE,MAAM,KAAK,GAAG,IAAI,MAAM,MAAM,QAAQ,EAAE;AAAA;AAAA,QAC1C,EAAE,MAAM,KAAK,GAAG,MAAM,MAAM,OAAO,QAAQ,EAAE;AAAA;AAAA,QAC7C,EAAE,MAAM,KAAK,GAAG,IAAI,MAAM,MAAM,QAAQ,EAAE;AAAA;AAAA,QAC1C,EAAE,MAAM,KAAK,GAAG,MAAM,MAAM,OAAO,QAAQ,EAAE;AAAA;AAAA,QAC7C,EAAE,MAAM,KAAK,GAAG,IAAI,MAAM,MAAM,QAAQ,EAAE;AAAA;AAAA,QAC1C,EAAE,MAAM,KAAK,GAAG,OAAO,MAAM,OAAO,QAAQ,EAAE;AAAA;AAAA,MAClD;AAEA,YAAM,WAAW,UAAU,KAAK,MAAM,KAAK,OAAO,IAAI,UAAU,MAAM,CAAC;AACvE,WAAK,cAAc,SAAS,OAAO,SAAS;AAC5C,WAAK,gBAAgB,SAAS;AAE9B,aAAO;AAAA,IACX;AAAA,IAER,0BAAwC;AAE5B,YAAM,YAAY,CAAC,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,IAAI;AACjE,YAAM,aAAa,UAAU,KAAK,MAAM,KAAK,OAAO,IAAI,UAAU,MAAM,CAAC;AAGzE,YAAM,YAAY;AAAA,QACd,EAAE,MAAM,aAAa,WAAW,EAAE;AAAA,QAClC,EAAE,MAAM,gBAAgB,WAAW,EAAE;AAAA;AAAA,QACrC,EAAE,MAAM,eAAe,WAAW,EAAE;AAAA;AAAA,QACpC,EAAE,MAAM,aAAa,WAAW,EAAE;AAAA;AAAA,MACtC;AAEA,YAAM,WAAW,UAAU,KAAK,MAAM,KAAK,OAAO,IAAI,UAAU,MAAM,CAAC;AACvE,WAAK,kBAAkB,EAAE,GAAG,UAAU,UAAU,WAAW;AAC3D,WAAK,gBAAgB,SAAS;AAG9B,YAAM,WAAW,KAAK,iBAAiB,UAAU;AACjD,YAAM,aAAa,WAAW,KAAK,IAAI,GAAG,SAAS,YAAY,EAAE;AACjE,WAAK,gBAAgB,CAAC,UAAU,UAAU;AAE1C,aAAO,KAAK;AAAA,IAChB;AAAA,IAER,uBAAkC;AAEtB,YAAM,YAAY,CAAC,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,IAAI;AAC3D,YAAM,aAAa,UAAU,KAAK,MAAM,KAAK,OAAO,IAAI,UAAU,MAAM,CAAC;AAGzE,YAAM,SAAS;AAAA,QACX,EAAE,MAAM,eAAe,OAAO,CAAC,GAAG,GAAG,CAAC,EAAE;AAAA;AAAA,QACxC,EAAE,MAAM,aAAa,OAAO,CAAC,GAAG,GAAG,CAAC,EAAE;AAAA;AAAA,MAC1C;AAEA,YAAM,QAAQ,OAAO,KAAK,MAAM,KAAK,OAAO,IAAI,OAAO,MAAM,CAAC;AAC9D,WAAK,eAAe,EAAE,GAAG,OAAO,UAAU,WAAW;AACrD,WAAK,gBAAgB,MAAM;AAG3B,YAAM,WAAW,KAAK,iBAAiB,UAAU;AACjD,WAAK,aAAa,MAAM,MAAM;AAAA,QAAI,cAC9B,WAAW,KAAK,IAAI,GAAG,WAAW,EAAE;AAAA,MACxC;AAEA,aAAO,KAAK;AAAA,IAChB;AAAA,IAER,uBAAsC;AAE1B,YAAM,QAAQ,CAAC,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,IAAI;AAC7D,YAAM,aAAa,MAAM,KAAK,MAAM,KAAK,OAAO,IAAI,MAAM,MAAM,CAAC;AAGjE,YAAM,WAAW;AAAA,QACb;AAAA,UACI,MAAM;AAAA,UACN,QAAQ,CAAC,KAAK,KAAK,KAAK,GAAG;AAAA,UAC3B,OAAO,CAAC,YAAY,YAAY,YAAY,UAAU;AAAA,QAC1D;AAAA,QACA;AAAA,UACI,MAAM;AAAA,UACN,QAAQ,CAAC,KAAK,KAAK,KAAK,GAAG;AAAA,UAC3B,OAAO,CAAC,YAAY,YAAY,YAAY,UAAU;AAAA,QAC1D;AAAA,QACA;AAAA,UACI,MAAM;AAAA,UACN,QAAQ,CAAC,KAAK,KAAK,KAAK,GAAG;AAAA,UAC3B,OAAO,CAAC,YAAY,YAAY,YAAY,UAAU;AAAA,QAC1D;AAAA,QACA;AAAA,UACI,MAAM;AAAA,UACN,QAAQ,CAAC,KAAK,GAAG,KAAK,GAAG;AAAA,UACzB,OAAO,CAAC,YAAY,MAAM,YAAY,UAAU;AAAA,QACpD;AAAA,QACA;AAAA,UACI,MAAM;AAAA,UACN,QAAQ,CAAC,KAAK,KAAK,KAAK,GAAG;AAAA,UAC3B,OAAO,KAAK,sBAAsB,UAAU;AAAA,QAChD;AAAA,QACA;AAAA,UACI,MAAM;AAAA,UACN,QAAQ,CAAC,KAAK,KAAK,KAAK,KAAK,GAAG;AAAA,UAChC,OAAO,KAAK,sBAAsB,UAAU;AAAA,QAChD;AAAA,MACJ;AAEA,YAAM,UAAU,SAAS,KAAK,MAAM,KAAK,OAAO,IAAI,SAAS,MAAM,CAAC;AACpE,WAAK,iBAAiB;AACtB,WAAK,gBAAgB,QAAQ;AAG7B,WAAK,gBAAgB;AAErB,aAAO;AAAA,IACX;AAAA,IAER,sBAAsB,UAAqC;AAC/C,YAAM,YAAY,CAAC,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,IAAI,EAAE,QAAQ,QAAQ;AACnF,YAAM,QAAQ,CAAC,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,IAAI;AAG7D,aAAO;AAAA,QACH,MAAM,SAAS;AAAA,QACf,MAAM,KAAK,IAAI,YAAY,GAAG,MAAM,SAAS,CAAC,CAAC;AAAA,QAC/C,MAAM,KAAK,IAAI,YAAY,GAAG,MAAM,SAAS,CAAC,CAAC;AAAA,QAC/C,MAAM,SAAS;AAAA,MACnB;AAAA,IACJ;AAAA,IAER,sBAAsB,UAAqC;AAC/C,YAAM,YAAY,CAAC,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,IAAI,EAAE,QAAQ,QAAQ;AACnF,YAAM,QAAQ,CAAC,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,IAAI;AAG7D,aAAO;AAAA,QACH,MAAM,SAAS;AAAA,QACf,MAAM,KAAK,IAAI,YAAY,GAAG,MAAM,SAAS,CAAC,CAAC;AAAA,QAC/C,MAAM,SAAS;AAAA,QACf,MAAM,KAAK,IAAI,YAAY,GAAG,MAAM,SAAS,CAAC,CAAC;AAAA,QAC/C,MAAM,SAAS;AAAA,MACnB;AAAA,IACJ;AAAA,IAER,gBAAgB,eAAuB,MAAwB;AAC3D,UAAI,aAAuB,CAAC;AAEpB,cAAQ,MAAM;AAAA,QACV,KAAK;AACD,uBAAa,CAAC,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,GAAG;AAC/C;AAAA,QACJ,KAAK;AACD,uBAAa,CAAC,aAAa,gBAAgB,eAAe,WAAW;AACrE;AAAA,QACJ,KAAK;AACD,uBAAa,CAAC,eAAe,WAAW;AACxC;AAAA,QACJ,KAAK;AACD,uBAAa,CAAC,aAAa,aAAa,cAAc,aAAa,eAAe,aAAa;AAC/F;AAAA,MACR;AAGA,YAAM,UAAU,CAAC,aAAa;AAG9B,aAAO,QAAQ,SAAS,KAAK,QAAQ,SAAS,WAAW,QAAQ;AAC7D,cAAM,SAAS,WAAW,KAAK,MAAM,KAAK,OAAO,IAAI,WAAW,MAAM,CAAC;AACvE,YAAI,CAAC,QAAQ,SAAS,MAAM,GAAG;AAC3B,kBAAQ,KAAK,MAAM;AAAA,QACvB;AAAA,MACJ;AAGA,aAAO,QAAQ,KAAK,MAAM,KAAK,OAAO,IAAI,GAAG;AAAA,IACjD;AAAA,IAER,cAAoB;AAChB,UAAI;AACJ,UAAI,cAAc;AAElB,cAAQ,KAAK,kBAAkB;AAAA,QAC3B,KAAK;AACD,wBAAc,KAAK,+BAA+B;AAClD,wBAAc,KAAK,gBAAgB,WAA2B;AAC9D;AAAA,QACJ,KAAK;AACD,wBAAc,KAAK,wBAAwB;AAC3C,wBAAc;AACd;AAAA,QACJ,KAAK;AACD,wBAAc,KAAK,qBAAqB;AACxC,wBAAc;AACd;AAAA,QACJ,KAAK;AACD,wBAAc,KAAK,qBAAqB;AACxC,wBAAc;AACd;AAAA,MACR;AAEQ,WAAK,aAAa,YAAY;AAG9B,UAAI,KAAK,WAAW;AAChB,qBAAa,KAAK,SAAS;AAC3B,aAAK,YAAY;AAAA,MACrB;AAGR,YAAM,UAAU,KAAK,gBAAgB,KAAK,eAAgB,KAAK,gBAAgB;AAC/E,WAAK,cAAc,YAAY;AAE/B,cAAQ,QAAQ,CAAC,QAAgB,UAAkB;AAC/C,cAAM,SAAS,SAAS,cAAc,QAAQ;AAC9C,eAAO,YAAY;AACnB,eAAO,cAAc;AACrB,eAAO,iBAAiB,SAAS,MAAM,KAAK,aAAa,QAAQ,MAAM,CAAC;AAGxE,YAAI,WAAW,KAAK,eAAe;AAC/B,eAAK,sBAAsB;AAAA,QAC/B;AAEA,aAAK,cAAc,YAAY,MAAM;AAAA,MACzC,CAAC;AAEO,WAAK,mBAAmB,KAAK,IAAI;AAGzC,UAAI,KAAK,cAAc;AACnB,aAAK,YAAY,WAAW,MAAM;AAC9B,cAAI,KAAK,uBAAuB,KAAK,YAAY;AAC7C,iBAAK,oBAAoB,UAAU,IAAI,MAAM;AAAA,UACjD;AAAA,QACJ,GAAG,GAAI;AAAA,MACX;AAGQ,iBAAW,MAAM,KAAK,oBAAoB,GAAG,GAAG;AAAA,IACpD;AAAA,IAER,gBAAgB,UAAgC;AACpC,YAAM,kBAAkB,SAAS,IAAI,KAAK,SAAS,IAAI;AACvD,YAAM,iBAAiB,kBACnB,uCAAuC,SAAS,CAAC,yCAAyC;AAE9F,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAQO,cAAc;AAAA;AAAA;AAAA,wDAGY,SAAS,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAMtD;AAAA,IAER,kBAAwB;AACpB,UAAI,CAAC,KAAK,gBAAgB,CAAC,KAAK,YAAa;AAG7C,UAAI,KAAK,aAAa,UAAU,aAAa;AACzC,aAAK,aAAa,OAAO;AAAA,MAC7B;AAEA,YAAM,YAAY,KAAK,iBAAiB,KAAK,WAAW;AACxD,WAAK,UAAU,WAAW,GAAG,GAAG;AAAA,IACpC;AAAA,IAEA,sBAA4B;AACxB,UAAI,CAAC,KAAK,aAAc;AAGxB,UAAI,KAAK,aAAa,UAAU,aAAa;AACzC,aAAK,aAAa,OAAO;AAAA,MAC7B;AAEA,cAAQ,KAAK,kBAAkB;AAAA,QAC3B,KAAK;AACD,eAAK,gBAAgB;AACrB;AAAA,QACJ,KAAK;AACD,eAAK,aAAa;AAClB;AAAA,QACJ,KAAK;AACD,eAAK,UAAU;AACf;AAAA,QACJ,KAAK;AACD,eAAK,WAAW;AAChB;AAAA,MACR;AAAA,IACJ;AAAA,IAEA,eAAqB;AACjB,UAAI,CAAC,KAAK,cAAe;AAGzB,WAAK,UAAU,KAAK,cAAc,CAAC,GAAG,KAAK,GAAG;AAG9C,iBAAW,MAAM;AACb,aAAK,UAAU,KAAK,cAAe,CAAC,GAAG,KAAK,GAAG;AAAA,MACnD,GAAG,GAAG;AAAA,IACV;AAAA,IAEA,YAAkB;AACd,UAAI,CAAC,KAAK,WAAY;AAGtB,WAAK,WAAW,QAAQ,CAAC,cAAsB;AAC3C,aAAK,UAAU,WAAW,KAAK,GAAG;AAAA,MACtC,CAAC;AAAA,IACL;AAAA,IAEA,aAAmB;AACf,UAAI,CAAC,KAAK,cAAe;AAEzB,UAAI,cAAc;AAElB,WAAK,cAAc,OAAO,QAAQ,CAAC,UAAkB,UAAkB;AACnE,YAAI,WAAW,KAAK,KAAK,cAAe,MAAM,KAAK,GAAG;AAClD,gBAAM,YAAY,KAAK,iBAAiB,KAAK,cAAe,MAAM,KAAK,CAAE;AACzE,qBAAW,MAAM;AACb,iBAAK,UAAU,WAAW,WAAW,MAAO,KAAK,GAAG;AAAA,UACxD,GAAG,WAAW;AAAA,QAClB;AACA,uBAAe;AAAA,MACnB,CAAC;AAAA,IACL;AAAA,IAEA,aAAa,QAAgB,QAAiC;AAClD,UAAI,CAAC,KAAK,WAAY;AAG9B,UAAI,KAAK,WAAW;AAChB,qBAAa,KAAK,SAAS;AAC3B,aAAK,YAAY;AAAA,MACrB;AACA,eAAS,iBAAiB,kBAAkB,EAAE,QAAQ,CAAC,QAAiB;AACpE,YAAI,UAAU,OAAO,MAAM;AAAA,MAC/B,CAAC;AAED,YAAM,YAAY,WAAW,KAAK;AAClC,YAAM,eAAe,KAAK,IAAI,IAAI,KAAK;AACvC,WAAK,cAAc,KAAK,YAAY;AAGpC,aAAO,UAAU,IAAI,YAAY,YAAY,WAAW;AAGxD,UAAI,CAAC,aAAa,KAAK,qBAAqB;AACxC,mBAAW,MAAM;AACb,eAAK,oBAAqB,UAAU,IAAI,SAAS;AAAA,QACrD,GAAG,GAAG;AAAA,MACV;AAGA,YAAM,aAAa,KAAK,cAAc,iBAAiB,aAAa;AACpE,iBAAW,QAAQ,CAAC,QAAkB,IAAoB,MAAM,gBAAgB,MAAM;AAG9E,WAAK,aAAa,SAAS;AAG3B,UAAI,WAAW;AAEX,aAAK,UAAU,KAAK,GAAG;AACvB,mBAAW,MAAM,KAAK,UAAU,KAAK,GAAG,GAAG,GAAG;AAC9C,mBAAW,MAAM,KAAK,UAAU,KAAK,GAAG,GAAG,GAAG;AAAA,MAClD,OAAO;AAEH,aAAK,UAAU,KAAK,GAAG;AACvB,mBAAW,MAAM,KAAK,UAAU,KAAK,GAAG,GAAG,GAAG;AAC9C,mBAAW,MAAM,KAAK,UAAU,KAAK,GAAG,GAAG,GAAG;AAAA,MAClD;AAEA,UAAI,WAAW;AACX,aAAK;AAAA,MACT;AAEA,WAAK;AACL,WAAK;AACL,WAAK,SAAS;AAGd,iBAAW,MAAM;AACb,YAAI,KAAK,WAAW,KAAK,KAAK,YAAY;AACtC,eAAK,YAAY;AAAA,QACrB;AAAA,MACJ,GAAG,YAAY,MAAM,IAAI;AAAA,IAC7B;AAAA,IAER,aAAa,WAA0B;AACnC,WAAK,gBAAgB,cAAc,YAAY,oBAAe;AAC9D,WAAK,gBAAgB,YAAY,oBAAoB,YAAY,YAAY,WAAW;AAGxF,WAAK,gBAAgB;AAErB,iBAAW,MAAM;AACb,aAAK,gBAAgB,YAAY;AAAA,MACrC,GAAG,GAAG;AAAA,IACV;AAAA,IAEA,cAAoB;AAChB,UAAI,CAAC,KAAK,WAAY;AACtB,WAAK;AACL,WAAK;AACL,WAAK,cAAc,KAAK,GAAK;AAC7B,WAAK,SAAS;AAEd,UAAI,KAAK,WAAW,GAAG;AACnB,aAAK,YAAY;AAAA,MACrB;AAAA,IACJ;AAAA,IAEA,WAAiB;AACb,YAAM,WAAW,KAAK,gBAAgB,IAAI,KAAK,MAAO,KAAK,iBAAiB,KAAK,gBAAiB,GAAG,IAAI;AACzG,WAAK,SAAS,cAAc,GAAG,QAAQ;AACvC,WAAK,eAAe,cAAc,GAAG,KAAK,cAAc;AAExD,YAAM,WAAW,KAAK,IAAK,KAAK,iBAAiB,KAAM,KAAK,GAAG;AAC/D,WAAK,aAAa,MAAM,QAAQ,GAAG,QAAQ;AAAA,IAC/C;AAAA,IAEA,cAAoB;AAChB,WAAK,MAAM,cAAc,KAAK,SAAS,SAAS;AAEhD,UAAI,KAAK,YAAY,IAAI;AACrB,aAAK,MAAM,YAAY;AAAA,MAC3B,WAAW,KAAK,YAAY,IAAI;AAC5B,aAAK,MAAM,YAAY;AAAA,MAC3B,OAAO;AACH,aAAK,MAAM,YAAY;AAAA,MAC3B;AAEA,UAAI,KAAK,YAAY,GAAG;AACpB,aAAK,QAAQ;AAAA,MACjB,OAAO;AACH,aAAK;AAAA,MACT;AAAA,IACJ;AAAA,IAEA,oBAA4B;AAChB,YAAM,WAAW,KAAK,gBAAgB,IAAK,KAAK,iBAAiB,KAAK,gBAAiB;AACvF,YAAM,kBAAkB,KAAK,cAAc,SAAS,IAChD,KAAK,cAAc,OAAO,CAAC,GAAG,MAAM,IAAI,GAAG,CAAC,IAAI,KAAK,cAAc,SAAS;AAExF,YAAM,cAAyC;AAAA,QAC3C,oBAAoB;AAAA,QACpB,wBAAwB;AAAA,QACxB,qBAAqB;AAAA,QACrB,kBAAkB;AAAA,MACtB;AACA,YAAM,qBAAqB,YAAY,KAAK,gBAAgB,KAAK;AAGzD,UAAI,WAAW;AAGf,mBAAa,IAAI,YAAY;AAG7B,kBAAY,KAAK,IAAK,kBAAkB,MAAQ,GAAG,EAAE;AAGrD,kBAAY;AAGZ,kBAAY,KAAK,IAAI,KAAK,gBAAgB,KAAK,EAAE;AAEjD,aAAO,KAAK,IAAI,GAAG,KAAK,IAAI,IAAI,KAAK,MAAM,QAAQ,CAAC,CAAC;AAAA,IACzD;AAAA,IAER,YAAkB;AACd,WAAK,UAAU;AACf,WAAK,aAAa;AAClB,WAAK,WAAW,MAAM;AAGtB,UAAI,KAAK,gBAAgB,KAAK,aAAa,UAAU,aAAa;AAC9D,aAAK,aAAa,OAAO;AAAA,MAC7B;AAGA,WAAK,YAAY,YAAY,MAAM,KAAK,YAAY,GAAG,GAAI;AAG3D,WAAK,YAAY;AAAA,IACrB;AAAA,IAEA,UAAgB;AACZ,WAAK,aAAa;AAClB,UAAI,KAAK,cAAc,MAAM;AACzB,sBAAc,KAAK,SAAS;AAAA,MAChC;AAGQ,UAAI,KAAK,WAAW;AAChB,qBAAa,KAAK,SAAS;AAC3B,aAAK,YAAY;AAAA,MACrB;AAGA,YAAM,WAAW,KAAK,kBAAkB;AACxC,YAAM,WAAW,KAAK,gBAAgB,IAAI,KAAK,MAAO,KAAK,iBAAiB,KAAK,gBAAiB,GAAG,IAAI;AACzG,YAAM,UAAU,KAAK,cAAc,SAAS,KACvC,KAAK,cAAc,OAAO,CAAC,GAAG,MAAM,IAAI,GAAG,CAAC,IAAI,KAAK,cAAc,SAAS,KAAM,QAAQ,CAAC,IAAI;AAG5G,YAAM,gBAA2C;AAAA,QAC7C,oBAAoB;AAAA,QACpB,wBAAwB;AAAA,QACxB,qBAAqB;AAAA,QACrB,kBAAkB;AAAA,MACtB;AAGA,eAAS,eAAe,UAAU,EAAG,cAAc,gBAAgB,QAAQ;AAC3E,eAAS,eAAe,eAAe,EAAG,cAAc,KAAK,cAAc,SAAS;AACpF,eAAS,eAAe,eAAe,EAAG,cAAc,GAAG,QAAQ;AACnE,eAAS,eAAe,SAAS,EAAG,cAAc,GAAG,OAAO;AAC5D,eAAS,eAAe,eAAe,EAAG,cAAc,cAAc,KAAK,gBAAgB,KAAK;AAExF,WAAK,WAAW,SAAS;AAAA,IAC7B;AAAA,IAER,aAAmB;AACf,YAAM,WAAW,SAAS,eAAe,UAAU,EAAG;AACtD,YAAM,WAAW,SAAS,eAAe,eAAe,EAAG;AAC3D,YAAM,WAAW,SAAS,eAAe,eAAe,EAAG;AAC3D,YAAM,WAAW,SAAS,eAAe,eAAe,EAAG;AAE3D,YAAM,YAAY;AAAA,EAA+C,QAAQ,YAAY,QAAQ,IAAI,QAAQ,kBAAkB,QAAQ;AAAA;AAAA,mBAAkC,OAAO,SAAS,IAAI;AAEzL,UAAI,UAAU,OAAO;AACjB,kBAAU,MAAM;AAAA,UACZ,OAAO;AAAA,UACP,MAAM;AAAA,QACV,CAAC;AAAA,MACL,OAAO;AACH,kBAAU,UAAU,UAAU,SAAS,EAAE,KAAK,MAAM;AAChD,gBAAM,4BAA4B;AAAA,QACtC,CAAC;AAAA,MACL;AAAA,IACJ;AAAA,IAEA,WAAW,QAAsB;AACrB,WAAK,YAAY,UAAU,IAAI,QAAQ;AACvC,WAAK,WAAW,UAAU,IAAI,QAAQ;AACtC,WAAK,cAAc,UAAU,IAAI,QAAQ;AAEzC,cAAQ,QAAQ;AAAA,QACZ,KAAK;AACD,eAAK,YAAY,UAAU,OAAO,QAAQ;AAC1C;AAAA,QACJ,KAAK;AACD,eAAK,WAAW,UAAU,OAAO,QAAQ;AACzC;AAAA,QACJ,KAAK;AACD,eAAK,cAAc,UAAU,OAAO,QAAQ;AAC5C;AAAA,MACR;AAAA,IACJ;AAAA,IAER,YAAkB;AACd,WAAK,UAAU;AACf,WAAK,WAAW,OAAO;AAAA,IAC3B;AAAA,EACJ;AAGA,MAAI,cAAc;AAGlB,MAAI,OAAO,WAAW,aAAa;AAAA,EAEnC;",
  "names": []
}

{
  "version": 3,
  "sources": ["../js/games/brain-training.ts"],
  "sourcesContent": ["/**\n * brain-training game logic\n * Migrated from brain-training.html\n */\n\n// Import utilities\nimport { setCookie, getCookie } from '../storage-utils';\n\n// Declare globals that might be used\ndeclare const window: any;\ndeclare const document: any;\n\nclass BrainTraining {\n            constructor() {\n                this.setupElements();\n                this.resetGame();\n                this.bindEvents();\n            }\n\n            setupElements() {\n                this.setupScreen = document.getElementById('setupScreen');\n                this.gameScreen = document.getElementById('gameScreen');\n                this.resultsScreen = document.getElementById('resultsScreen');\n                this.difficultyButtons = document.querySelectorAll('.difficulty-btn');\n                this.timeLimitSlider = document.getElementById('timeLimit');\n                this.timeDisplay = document.getElementById('timeDisplay');\n                this.buttonModeRadio = document.getElementById('buttonMode');\n                this.assistedModeRadio = document.getElementById('assistedMode');\n                this.keyboardModeRadio = document.getElementById('keyboardInputMode');\n                this.startBtn = document.getElementById('startBtn');\n                this.timer = document.getElementById('timer');\n                this.problemCounter = document.getElementById('problemCounter');\n                this.accuracy = document.getElementById('accuracy');\n                this.progressFill = document.getElementById('progressFill');\n                this.equationsContainer = document.getElementById('equationsContainer');\n                this.equationItems = [];\n                for (let i = 0; i < 5; i++) {\n                    this.equationItems[i] = document.getElementById(`equation-${i}`);\n                }\n                this.keyboardInput = document.getElementById('keyboardInput');\n                this.answerInput = document.getElementById('answerInput');\n                this.submitBtn = document.getElementById('submitBtn');\n                this.answerOptions = document.getElementById('answerOptions');\n                this.playAgainBtn = document.getElementById('playAgainBtn');\n                this.shareSocreBtn = document.getElementById('shareSocreBtn');\n                this.feedbackOverlay = document.getElementById('feedbackOverlay');\n                // Certificate elements\n                this.playerNameInput = document.getElementById('playerNameInput');\n                this.playerNameDisplay = document.getElementById('playerNameDisplay');\n                this.printCertificateBtn = document.getElementById('printCertificateBtn');\n                this.setupAudio();\n            }\n\n            setupAudio() {\n                // Create audio context for sound effects\n                try {\n                    this.audioContext = new (window.AudioContext || window.webkitAudioContext)();\n                } catch (e) {\n                    this.audioContext = null;\n                }\n            }\n\n            playSound(frequency, duration, volume = 0.1) {\n                if (!this.audioContext) return;\n\n                try {\n                    const oscillator = this.audioContext.createOscillator();\n                    const gainNode = this.audioContext.createGain();\n\n                    oscillator.connect(gainNode);\n                    gainNode.connect(this.audioContext.destination);\n\n                    oscillator.frequency.value = frequency;\n                    oscillator.type = 'sine';\n\n                    gainNode.gain.setValueAtTime(0, this.audioContext.currentTime);\n                    gainNode.gain.linearRampToValueAtTime(volume, this.audioContext.currentTime + 0.01);\n                    gainNode.gain.exponentialRampToValueAtTime(0.001, this.audioContext.currentTime + duration);\n\n                    oscillator.start(this.audioContext.currentTime);\n                    oscillator.stop(this.audioContext.currentTime + duration);\n                } catch (e) {\n                    // Audio might not be supported\n                }\n            }\n\n            resetGame() {\n                this.timeLeft = parseInt(this.timeLimitSlider.value) || 60;\n                this.currentProblem = 0;\n                this.correctAnswers = 0;\n                this.totalProblems = 0;\n                this.startTime = null;\n                this.problemStartTime = null;\n                this.responseTimes = [];\n                this.gameActive = false;\n                this.currentAnswer = null;\n                this.hintTimer = null;\n\n                // Initialize equation queue\n                this.equationQueue = [];\n                this.currentEquationIndex = 0; // Start at first equation\n                this.completedProblems = [];\n                this.keyboardMode = false;\n\n                // Pre-generate initial equations\n                this.initializeEquationQueue();\n                this.assistedMode = this.assistedModeRadio.checked;\n                this.keyboardMode = this.keyboardModeRadio.checked;\n                this.selectedDifficulty = document.querySelector('.difficulty-btn.selected')?.dataset.difficulty || 'easy';\n\n                // Load settings from cookies\n                this.loadSettings();\n            }\n\n            setCookie(name, value, days = 365) {\n                const d = new Date();\n                d.setTime(d.getTime() + (days * 24 * 60 * 60 * 1000));\n                document.cookie = `${name}=${encodeURIComponent(value)};expires=${d.toUTCString()};path=/;SameSite=Lax`;\n            }\n\n            getCookie(name) {\n                const match = document.cookie.split(';').map(s => s.trim()).find(s => s.startsWith(name + '='));\n                return match ? decodeURIComponent(match.split('=')[1]) : null;\n            }\n\n            loadSettings() {\n                // Load input mode\n                const inputMode = this.getCookie('inputMode');\n                if (inputMode !== null) {\n                    // Uncheck all radio buttons first\n                    this.buttonModeRadio.checked = false;\n                    this.assistedModeRadio.checked = false;\n                    this.keyboardModeRadio.checked = false;\n\n                    // Check the correct radio button\n                    switch(inputMode) {\n                        case 'button':\n                            this.buttonModeRadio.checked = true;\n                            this.assistedMode = false;\n                            this.keyboardMode = false;\n                            break;\n                        case 'assisted':\n                            this.assistedModeRadio.checked = true;\n                            this.assistedMode = true;\n                            this.keyboardMode = false;\n                            break;\n                        case 'keyboard':\n                            this.keyboardModeRadio.checked = true;\n                            this.assistedMode = false;\n                            this.keyboardMode = true;\n                            break;\n                        default:\n                            this.buttonModeRadio.checked = true;\n                            this.assistedMode = false;\n                            this.keyboardMode = false;\n                    }\n                }\n\n                // Load time limit\n                const timeLimit = this.getCookie('timeLimit');\n                if (timeLimit !== null) {\n                    this.timeLimitSlider.value = timeLimit;\n                    this.timeDisplay.textContent = `${timeLimit}s`;\n                }\n\n                // Load difficulty\n                const difficulty = this.getCookie('difficulty');\n                if (difficulty !== null) {\n                    // Remove selected class from all buttons\n                    this.difficultyButtons.forEach(btn => btn.classList.remove('selected'));\n                    // Add selected class to the saved difficulty\n                    const savedBtn = document.querySelector(`[data-difficulty=\"${difficulty}\"]`);\n                    if (savedBtn) {\n                        savedBtn.classList.add('selected');\n                        this.selectedDifficulty = difficulty;\n                    }\n                }\n\n                // Initialize input mode display\n                this.updateInputModeDisplay();\n\n                // Load player name (shared across games)\n                const savedName = this.getCookie('playerName');\n                if (savedName) {\n                    this.playerNameInput.value = savedName;\n                }\n            }\n\n            saveSettings() {\n                // Save input mode based on which radio button is checked\n                let inputMode = 'button';\n                if (this.assistedModeRadio.checked) {\n                    inputMode = 'assisted';\n                } else if (this.keyboardModeRadio.checked) {\n                    inputMode = 'keyboard';\n                }\n                this.setCookie('inputMode', inputMode);\n                this.setCookie('timeLimit', this.timeLimitSlider.value);\n                this.setCookie('difficulty', this.selectedDifficulty);\n                // Save player name if present\n                const name = (this.playerNameInput?.value || '').trim();\n                if (name) this.setCookie('playerName', name);\n            }\n\n            initializeEquationQueue() {\n                // Generate initial 5 equations\n                this.equationQueue = [];\n                for (let i = 0; i < 5; i++) {\n                    this.equationQueue.push(this.generateProblem());\n                }\n\n                // Generate additional equations ahead of time\n                for (let i = 0; i < 10; i++) {\n                    this.equationQueue.push(this.generateProblem());\n                }\n\n                this.updateEquationDisplay();\n            }\n\n            updateEquationDisplay() {\n                for (let i = 0; i < 5; i++) {\n                    const equationItem = this.equationItems[i];\n                    const equationText = equationItem.querySelector('.equation-text');\n                    const equationStatus = equationItem.querySelector('.equation-status');\n\n                    // Remove all state classes\n                    equationItem.classList.remove('completed', 'current', 'future');\n\n                    // Determine which equation to show in each slot\n                    let equationIndex;\n\n                    if (this.currentProblem < 3) {\n                        // First 3 problems: show equations 0-4\n                        equationIndex = i;\n                    } else {\n                        // After 3rd problem: scrolling window\n                        equationIndex = (this.currentProblem - 2) + i;\n                    }\n\n                    const equation = this.equationQueue[equationIndex];\n\n                    if (equationIndex < this.currentProblem) {\n                        // Completed equation\n                        equationItem.classList.add('completed');\n                        if (equation) {\n                            equationText.textContent = `${equation.num1} ${equation.operation} ${equation.num2} = ${equation.answer}`;\n                            // Check if this was answered correctly\n                            const wasCorrect = this.completedProblems[equationIndex]?.correct ?? true;\n                            equationStatus.textContent = wasCorrect ? '\u2713' : '\u2717';\n                            equationStatus.style.color = wasCorrect ? '#28a745' : '#dc3545';\n                        }\n                    } else if (equationIndex === this.currentProblem) {\n                        // Current equation\n                        equationItem.classList.add('current');\n                        if (equation) {\n                            equationText.textContent = `${equation.num1} ${equation.operation} ${equation.num2} = ?`;\n                            equationStatus.textContent = '\u276F';\n                        } else {\n                            equationText.textContent = 'Get Ready...';\n                            equationStatus.textContent = '\u276F';\n                        }\n                    } else {\n                        // Future equation\n                        equationItem.classList.add('future');\n                        if (equation) {\n                            equationText.textContent = `${equation.num1} ${equation.operation} ${equation.num2} = ?`;\n                        } else {\n                            equationText.textContent = 'Loading...';\n                        }\n                        equationStatus.textContent = '\u22EF';\n                    }\n                }\n            }\n\n            moveToNextEquation(wasCorrect) {\n                // Store the completed problem result\n                this.completedProblems[this.currentProblem] = {\n                    correct: wasCorrect\n                };\n\n                // Move to next problem\n                this.currentProblem++;\n\n                // Generate new equations if needed\n                while (this.equationQueue.length <= this.currentProblem + 5) {\n                    this.equationQueue.push(this.generateProblem());\n                }\n\n                // Update current answer immediately to the next problem\n                const nextProblem = this.equationQueue[this.currentProblem];\n                if (nextProblem) {\n                    this.currentAnswer = nextProblem.answer;\n                }\n\n                // Clear input field and refocus for keyboard mode\n                if (this.keyboardMode) {\n                    this.answerInput.value = '';\n                    setTimeout(() => {\n                        this.answerInput.focus();\n                        this.answerInput.select();\n                    }, 100);\n                }\n\n                // Add smooth scrolling animation\n                this.animateEquationScroll();\n            }\n\n            animateEquationScroll() {\n                // Add gentle transition animation\n                this.equationsContainer.classList.add('transitioning');\n\n                // Update content after brief animation\n                setTimeout(() => {\n                    this.updateEquationDisplay();\n                    this.equationsContainer.classList.remove('transitioning');\n                }, 200);\n            }\n\n            updateInputModeDisplay() {\n                if (this.keyboardMode) {\n                    this.answerOptions.style.display = 'none';\n                    this.keyboardInput.style.display = 'flex';\n                } else {\n                    this.answerOptions.style.display = 'grid';\n                    this.keyboardInput.style.display = 'none';\n                }\n            }\n\n            toggleInputMode() {\n                this.keyboardMode = !this.keyboardMode;\n\n                if (this.keyboardMode) {\n                    this.answerOptions.style.display = 'none';\n                    this.keyboardInput.style.display = 'flex';\n                    this.toggleInputBtn.textContent = 'Use Buttons';\n                    this.answerInput.focus();\n                } else {\n                    this.answerOptions.style.display = 'grid';\n                    this.keyboardInput.style.display = 'none';\n                    this.toggleInputBtn.textContent = 'Use Keyboard';\n                }\n\n                // Clear input field when switching modes\n                this.answerInput.value = '';\n            }\n\n            submitKeyboardAnswer() {\n                if (!this.gameActive || !this.keyboardMode) return;\n\n                const userAnswer = parseInt(this.answerInput.value);\n                if (isNaN(userAnswer)) {\n                    this.answerInput.focus();\n                    return;\n                }\n\n                // Ensure both values are numbers for comparison\n                const correctAnswer = parseInt(this.currentAnswer);\n                const isCorrect = userAnswer === correctAnswer;\n\n                // Debug logging\n                console.log('Keyboard - User answer:', userAnswer, typeof userAnswer, 'Correct answer:', correctAnswer, typeof correctAnswer, 'Original this.currentAnswer:', this.currentAnswer, typeof this.currentAnswer, 'Match:', isCorrect);\n\n                this.handleAnswer(isCorrect);\n\n                // Clear input for next problem\n                this.answerInput.value = '';\n                this.answerInput.focus();\n            }\n\n            handleAnswer(isCorrect) {\n                if (!this.gameActive) return;\n\n                // Record response time\n                const responseTime = Date.now() - this.problemStartTime;\n                this.responseTimes.push(responseTime);\n\n                // Show feedback\n                this.showFeedback(isCorrect);\n\n                // Play sound\n                if (isCorrect) {\n                    this.playSound(523, 0.2); // C5\n                } else {\n                    // Error sound sequence\n                    setTimeout(() => this.playSound(250, 0.1), 100);\n                    setTimeout(() => this.playSound(200, 0.2), 200);\n                }\n\n                if (isCorrect) {\n                    this.correctAnswers++;\n                }\n\n                this.totalProblems++;\n\n                // Move to next equation in the display\n                this.moveToNextEquation(isCorrect);\n\n                this.updateUI();\n\n                // Move to next problem after delay\n                setTimeout(() => {\n                    if (this.timeLeft > 0 && this.gameActive) {\n                        this.showProblem();\n                    }\n                }, 800);\n            }\n\n            bindEvents() {\n                this.startBtn.addEventListener('click', () => this.startGame());\n                this.playAgainBtn.addEventListener('click', () => this.showSetup());\n                this.shareSocreBtn.addEventListener('click', () => this.shareScore());\n                this.submitBtn.addEventListener('click', () => this.submitKeyboardAnswer());\n                this.printCertificateBtn.addEventListener('click', () => this.printCertificate());\n                this.playerNameInput.addEventListener('input', () => {\n                    // Persist live as kids type\n                    this.setCookie('playerName', this.playerNameInput.value);\n                });\n\n                // Enter key handling for keyboard input\n                this.answerInput.addEventListener('keypress', (e) => {\n                    if (e.key === 'Enter') {\n                        this.submitKeyboardAnswer();\n                    }\n                });\n\n                // Arrow key controls for button mode\n                document.addEventListener('keydown', (e) => {\n                    if (!this.gameActive || this.keyboardMode) return;\n\n                    const buttons = this.answerOptions.querySelectorAll('.answer-btn');\n                    if (buttons.length !== 4) return;\n\n                    let targetButton = null;\n\n                    switch(e.key) {\n                        case 'ArrowLeft':\n                            targetButton = buttons[0];\n                            e.preventDefault();\n                            break;\n                        case 'ArrowUp':\n                            targetButton = buttons[1];\n                            e.preventDefault();\n                            break;\n                        case 'ArrowDown':\n                            targetButton = buttons[2];\n                            e.preventDefault();\n                            break;\n                        case 'ArrowRight':\n                            targetButton = buttons[3];\n                            e.preventDefault();\n                            break;\n                    }\n\n                    if (targetButton && targetButton.style.pointerEvents !== 'none') {\n                        const answer = targetButton.textContent;\n                        this.selectAnswer(answer, targetButton);\n                    }\n                });\n\n                // Difficulty button selection\n                this.difficultyButtons.forEach(btn => {\n                    btn.addEventListener('click', () => {\n                        this.difficultyButtons.forEach(b => b.classList.remove('selected'));\n                        btn.classList.add('selected');\n                        // Update the selectedDifficulty immediately\n                        this.selectedDifficulty = btn.dataset.difficulty;\n                        this.saveSettings();\n                    });\n                });\n\n                // Settings checkboxes\n                // Radio button event handlers\n                [this.buttonModeRadio, this.assistedModeRadio, this.keyboardModeRadio].forEach(radio => {\n                    radio.addEventListener('change', () => {\n                        if (radio.checked) {\n                            // Update mode variables\n                            this.assistedMode = this.assistedModeRadio.checked;\n                            this.keyboardMode = this.keyboardModeRadio.checked;\n\n                            // Update input display\n                            this.updateInputModeDisplay();\n\n                            // Focus input if switching to keyboard mode\n                            if (this.keyboardMode && this.gameActive) {\n                                setTimeout(() => this.answerInput.focus(), 100);\n                            }\n\n                            // Save settings\n                            this.saveSettings();\n                        }\n                    });\n                });\n\n\n                // Time slider update\n                this.timeLimitSlider.addEventListener('input', () => {\n                    this.timeDisplay.textContent = `${this.timeLimitSlider.value}s`;\n                    this.saveSettings();\n                });\n            }\n\n            generateProblem() {\n                const difficulty = this.selectedDifficulty;\n                let num1, num2, operation, answer;\n\n                switch (difficulty) {\n                    case 'easy':\n                        num1 = Math.floor(Math.random() * 9) + 1;  // 1-9\n                        num2 = Math.floor(Math.random() * 9) + 1;  // 1-9\n                        operation = Math.random() < 0.8 ? '+' : '-';  // Mostly addition\n                        // For subtraction, ensure first number is larger to avoid negative results\n                        if (operation === '-' && num1 < num2) {\n                            [num1, num2] = [num2, num1];\n                        }\n                        break;\n                    case 'medium':\n                        num1 = Math.floor(Math.random() * 90) + 10;\n                        num2 = Math.floor(Math.random() * 9) + 1;\n                        operation = Math.random() < 0.6 ? '+' : '-';\n                        break;\n                    case 'hard':\n                        num1 = Math.floor(Math.random() * 90) + 10;\n                        num2 = Math.floor(Math.random() * 90) + 10;\n                        operation = Math.random() < 0.5 ? '+' : '-';\n                        break;\n                    case 'expert':\n                        num1 = Math.floor(Math.random() * 900) + 100;\n                        num2 = Math.floor(Math.random() * 90) + 10;\n                        const ops = ['+', '-', '\u00D7', '\u00F7'];\n                        operation = ops[Math.floor(Math.random() * ops.length)];\n                        break;\n                }\n\n                // Calculate answer and ensure positive results for subtraction\n                switch (operation) {\n                    case '+':\n                        answer = num1 + num2;\n                        break;\n                    case '-':\n                        // For non-easy modes, ensure first number is larger\n                        if (difficulty !== 'easy' && num1 < num2) {\n                            [num1, num2] = [num2, num1];\n                        }\n                        answer = num1 - num2;\n                        break;\n                    case '\u00D7':\n                        // For multiplication, use smaller numbers\n                        num1 = Math.floor(Math.random() * 12) + 1;\n                        num2 = Math.floor(Math.random() * 12) + 1;\n                        answer = num1 * num2;\n                        break;\n                    case '\u00F7':\n                        // For division, ensure whole number results\n                        answer = Math.floor(Math.random() * 12) + 1;\n                        num2 = Math.floor(Math.random() * 9) + 2;\n                        num1 = answer * num2;\n                        break;\n                }\n\n                return { num1, num2, operation, answer };\n            }\n\n            showProblem() {\n                const problem = this.equationQueue[this.currentProblem];\n                if (!problem) return;\n\n                this.currentAnswer = problem.answer;\n\n                // Update input mode display\n                this.updateInputModeDisplay();\n\n                // Focus input field if in keyboard mode\n                if (this.keyboardMode) {\n                    setTimeout(() => this.answerInput.focus(), 100);\n                }\n\n                // Clear any existing hint timer\n                if (this.hintTimer) {\n                    clearTimeout(this.hintTimer);\n                    this.hintTimer = null;\n                }\n\n                // Generate multiple choice options\n                const options = this.generateOptions(problem.answer);\n                this.answerOptions.innerHTML = '';\n\n                // Arrow key labels for each button position\n                const arrowLabels = ['\u2190', '\u2191', '\u2193', '\u2192'];\n\n                options.forEach((option, index) => {\n                    const button = document.createElement('button');\n                    button.className = 'answer-btn';\n\n                    // Create container for answer and arrow hint\n                    const arrowHint = document.createElement('span');\n                    arrowHint.className = 'arrow-hint';\n                    arrowHint.textContent = arrowLabels[index];\n                    arrowHint.style.cssText = 'position: absolute; top: 4px; right: 8px; opacity: 0.4; font-size: 0.8em;';\n\n                    button.textContent = option;\n                    button.style.position = 'relative';\n                    button.appendChild(arrowHint);\n\n                    button.addEventListener('click', () => this.selectAnswer(option, button));\n\n                    // Store reference to correct answer button for assisted mode\n                    if (option === this.currentAnswer) {\n                        this.correctAnswerButton = button;\n                    }\n\n                    this.answerOptions.appendChild(button);\n                });\n\n                this.problemStartTime = Date.now();\n\n                // Start hint timer for assisted mode\n                if (this.assistedMode) {\n                    this.hintTimer = setTimeout(() => {\n                        if (this.correctAnswerButton && this.gameActive) {\n                            this.correctAnswerButton.classList.add('hint');\n                        }\n                    }, 3000); // Start hinting after 3 seconds\n                }\n            }\n\n            generateOptions(correctAnswer) {\n                const options = [correctAnswer];\n                const range = Math.max(10, Math.floor(correctAnswer * 0.5));\n\n                while (options.length < 4) {\n                    let option;\n                    if (Math.random() < 0.5) {\n                        // Generate nearby wrong answers\n                        option = correctAnswer + Math.floor(Math.random() * range) - Math.floor(range / 2);\n                    } else {\n                        // Generate random wrong answers\n                        option = Math.floor(Math.random() * (correctAnswer * 2)) + 1;\n                    }\n\n                    if (option > 0 && !options.includes(option)) {\n                        options.push(option);\n                    }\n                }\n\n                // Shuffle options\n                return options.sort(() => Math.random() - 0.5);\n            }\n\n            selectAnswer(answer, button) {\n                if (!this.gameActive) return;\n\n                // Clear hint timer and remove hint animation\n                if (this.hintTimer) {\n                    clearTimeout(this.hintTimer);\n                    this.hintTimer = null;\n                }\n                document.querySelectorAll('.answer-btn.hint').forEach(btn => {\n                    btn.classList.remove('hint');\n                });\n\n                // Ensure both values are numbers for comparison\n                const userAnswer = parseInt(answer);\n                const correctAnswer = parseInt(this.currentAnswer);\n                const isCorrect = userAnswer === correctAnswer;\n\n                // Debug logging\n                console.log('Button - User answer:', userAnswer, typeof userAnswer, 'Correct answer:', correctAnswer, typeof correctAnswer, 'Original this.currentAnswer:', this.currentAnswer, typeof this.currentAnswer, 'Match:', isCorrect);\n\n                // Visual feedback on button\n                button.classList.add(isCorrect ? 'correct' : 'incorrect');\n\n                // Disable all buttons temporarily\n                const allButtons = this.answerOptions.querySelectorAll('.answer-btn');\n                allButtons.forEach(btn => btn.style.pointerEvents = 'none');\n\n                this.handleAnswer(isCorrect);\n            }\n\n            showFeedback(isCorrect) {\n                this.feedbackOverlay.textContent = isCorrect ? '\u2713 Correct!' : '\u2717 Wrong!';\n                this.feedbackOverlay.className = `feedback-overlay ${isCorrect ? 'correct' : 'incorrect'}`;\n\n                // Trigger animation by forcing reflow\n                this.feedbackOverlay.offsetHeight;\n\n                setTimeout(() => {\n                    this.feedbackOverlay.className = 'feedback-overlay';\n                }, 600);\n            }\n\n\n            skipProblem() {\n                if (!this.gameActive) return;\n                this.totalProblems++;\n\n                // Move to next equation in the display\n                this.moveToNextEquation(false);\n\n                this.responseTimes.push(10000); // Penalty time\n                this.updateUI();\n\n                if (this.timeLeft > 0) {\n                    this.showProblem();\n                }\n            }\n\n            updateUI() {\n                const accuracy = this.totalProblems > 0 ? Math.round((this.correctAnswers / this.totalProblems) * 100) : 100;\n                this.accuracy.textContent = `${accuracy}%`;\n                this.problemCounter.textContent = `${this.currentProblem}`;\n\n                const progress = Math.min((this.currentProblem / 60) * 100, 100);\n                this.progressFill.style.width = `${progress}%`;\n            }\n\n            updateTimer() {\n                this.timer.textContent = this.timeLeft;\n\n                if (this.timeLeft <= 10) {\n                    this.timer.className = 'timer danger';\n                } else if (this.timeLeft <= 20) {\n                    this.timer.className = 'timer warning';\n                } else {\n                    this.timer.className = 'timer';\n                }\n\n                if (this.timeLeft <= 0) {\n                    this.endGame();\n                } else {\n                    this.timeLeft--;\n                }\n            }\n\n            calculateBrainAge() {\n                const accuracy = this.totalProblems > 0 ? (this.correctAnswers / this.totalProblems) : 0;\n                const avgResponseTime = this.responseTimes.length > 0 ?\n                    this.responseTimes.reduce((a, b) => a + b, 0) / this.responseTimes.length : 5000;\n\n                const difficultyMultiplier = {\n                    'easy': 1.2,\n                    'medium': 1.0,\n                    'hard': 0.8,\n                    'expert': 0.6\n                }[this.selectedDifficulty];\n\n                // Base age calculation (lower is better)\n                let brainAge = 20;\n\n                // Accuracy factor (0-100%)\n                brainAge += (1 - accuracy) * 40;\n\n                // Speed factor (response time in seconds)\n                brainAge += Math.min((avgResponseTime / 1000) * 5, 30);\n\n                // Difficulty bonus\n                brainAge *= difficultyMultiplier;\n\n                // Problems solved bonus\n                brainAge -= Math.min(this.totalProblems * 0.2, 10);\n\n                return Math.max(8, Math.min(80, Math.round(brainAge)));\n            }\n\n            startGame() {\n                this.resetGame();\n                this.gameActive = true;\n                this.showScreen('game');\n\n                // Enable audio context on user interaction\n                if (this.audioContext && this.audioContext.state === 'suspended') {\n                    this.audioContext.resume();\n                }\n\n                // Start the game immediately\n                this.gameTimer = setInterval(() => this.updateTimer(), 1000);\n                this.updateEquationDisplay();\n                this.showProblem();\n\n                // Focus input if in keyboard mode\n                if (this.keyboardMode) {\n                    setTimeout(() => {\n                        this.answerInput.focus();\n                        this.answerInput.select();\n                    }, 100);\n                }\n            }\n\n            endGame() {\n                this.gameActive = false;\n                clearInterval(this.gameTimer);\n\n                // Clear hint timer\n                if (this.hintTimer) {\n                    clearTimeout(this.hintTimer);\n                    this.hintTimer = null;\n                }\n\n                // Calculate results\n                const brainAge = this.calculateBrainAge();\n                const accuracy = this.totalProblems > 0 ? Math.round((this.correctAnswers / this.totalProblems) * 100) : 0;\n                const avgTime = this.responseTimes.length > 0 ?\n                    (this.responseTimes.reduce((a, b) => a + b, 0) / this.responseTimes.length / 1000).toFixed(1) : '0.0';\n\n                // Get difficulty name\n                const difficultyNames = {\n                    'easy': 'Easy',\n                    'medium': 'Medium',\n                    'hard': 'Hard',\n                    'expert': 'Expert'\n                };\n\n                // Show results\n                document.getElementById('brainAge').textContent = `Brain Age: ${brainAge}`;\n                document.getElementById('finalProblems').textContent = this.totalProblems;\n                document.getElementById('finalAccuracy').textContent = `${accuracy}%`;\n                document.getElementById('avgTime').textContent = `${avgTime}s`;\n                document.getElementById('finalDifficulty').textContent = difficultyNames[this.selectedDifficulty];\n\n                // Populate certificate\n                const name = (this.playerNameInput.value || '').trim();\n                if (name) {\n                    this.playerNameDisplay.textContent = name;\n                    this.playerNameDisplay.style.display = '';\n                    this.playerNameInput.style.display = 'none';\n                } else {\n                    this.playerNameDisplay.style.display = 'none';\n                    this.playerNameInput.style.display = '';\n                }\n                document.getElementById('certAge').textContent = brainAge;\n                document.getElementById('certProblems').textContent = this.totalProblems;\n                document.getElementById('certAccuracy').textContent = `${accuracy}%`;\n                document.getElementById('certAvg').textContent = `${avgTime}s`;\n                document.getElementById('certLevel').textContent = difficultyNames[this.selectedDifficulty];\n                try {\n                    const dateStr = new Date().toLocaleDateString(undefined, {year: 'numeric', month: 'short', day: 'numeric'});\n                    document.getElementById('certDate').textContent = dateStr;\n                } catch {}\n\n                this.showScreen('results');\n            }\n\n            printCertificate() {\n                // Open a clean print view of the certificate only\n                const cert = document.getElementById('certificate');\n                if (!cert) return;\n                const html = `<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"utf-8\" />\n  <title>Brain Training Certificate</title>\n  <style>\n    * { -webkit-print-color-adjust: exact; print-color-adjust: exact; }\n    body { margin: 16mm; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; }\n    .certificate { ${'border: 6px double #2d3748; border-radius: 16px; padding: 30px;'} }\n    @page { size: A4; margin: 12mm; }\n  </style>\n  <link rel=\"stylesheet\" href=\"${location.origin + location.pathname.replace(/\\/[^/]*$/, '/') + 'styles.css'}\">\n  <style>${document.querySelector('style')?.textContent || ''}</style>\n  </head>\n<body>\n  ${cert.outerHTML}\n  <script>window.onload = function(){ setTimeout(function(){ window.print(); }, 100); };<\\/script>\n</body>\n</html>`;\n                const w = window.open('', '_blank');\n                if (!w) return;\n                w.document.open();\n                w.document.write(html);\n                w.document.close();\n            }\n\n            shareScore() {\n                const brainAge = document.getElementById('brainAge').textContent;\n                const accuracy = document.getElementById('finalAccuracy').textContent;\n                const problems = document.getElementById('finalProblems').textContent;\n\n                const shareText = `\uD83E\uDDE0 I just completed Brain Training Speed Math!\\n${brainAge}, solved ${problems} problems with ${accuracy} accuracy!\\n\\nTry it yourself: ${window.location.href}`;\n\n                if (navigator.share) {\n                    navigator.share({\n                        title: 'Brain Training Speed Math Results',\n                        text: shareText\n                    });\n                } else {\n                    navigator.clipboard.writeText(shareText).then(() => {\n                        alert('Score copied to clipboard!');\n                    });\n                }\n            }\n\n            showScreen(screen) {\n                this.setupScreen.classList.add('hidden');\n                this.gameScreen.classList.add('hidden');\n                this.resultsScreen.classList.add('hidden');\n\n                switch (screen) {\n                    case 'setup':\n                        this.setupScreen.classList.remove('hidden');\n                        break;\n                    case 'game':\n                        this.gameScreen.classList.remove('hidden');\n                        break;\n                    case 'results':\n                        this.resultsScreen.classList.remove('hidden');\n                        break;\n                }\n            }\n\n            showSetup() {\n                this.resetGame();\n                this.showScreen('setup');\n            }\n        }\n\n        // Initialize the game\n        new BrainTraining();\n\n// Export init function if it exists\nif (typeof window !== 'undefined') {\n  // Initialization code runs automatically\n}\n"],
  "mappings": "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",
  "names": []
}

{
  "version": 3,
  "sources": ["../js/games/place-value-showdown.ts"],
  "sourcesContent": ["// @ts-nocheck\n/**\n * place-value-showdown game logic\n * Migrated from place-value-showdown.html\n */\n\n// Import utilities\nimport { setCookie, getCookie } from '../storage-utils';\n\n// Declare globals that might be used\ndeclare const window: any;\ndeclare const document: any;\n\n(function(){\n  const state = {\n    difficulty: 3,\n    mode: '2players',\n    currentPlayer: 1,\n    currentRoll: null,\n    players: {\n      1: { digits: [], wins: 0 },\n      2: { digits: [], wins: 0 }\n    },\n    gameOver: false\n  };\n\n  const elements = {\n    difficultySelect: document.getElementById('difficultySelect'),\n    modeSelect: document.getElementById('modeSelect'),\n    settingsPanel: document.getElementById('settingsPanel'),\n    player1Area: document.getElementById('player1Area'),\n    player2Area: document.getElementById('player2Area'),\n    player2Name: document.getElementById('player2Name'),\n    p1Dice: document.getElementById('p1Dice'),\n    p2Dice: document.getElementById('p2Dice'),\n    p1Grid: document.getElementById('p1Grid'),\n    p2Grid: document.getElementById('p2Grid'),\n    p1Final: document.getElementById('p1Final'),\n    p2Final: document.getElementById('p2Final'),\n    p1Score: document.getElementById('p1Score'),\n    p2Score: document.getElementById('p2Score'),\n    statusMsg: document.getElementById('statusMsg'),\n    rollBtn: document.getElementById('rollBtn'),\n    newGameBtn: document.getElementById('newGameBtn'),\n    winnerModal: document.getElementById('winnerModal'),\n    winnerTitle: document.getElementById('winnerTitle'),\n    winnerP1: document.getElementById('winnerP1'),\n    winnerP2: document.getElementById('winnerP2'),\n    playAgainBtn: document.getElementById('playAgainBtn')\n  };\n\n  function updateSettings() {\n    state.difficulty = parseInt(elements.difficultySelect.value);\n    state.mode = elements.modeSelect.value;\n    elements.player2Name.textContent = state.mode === 'vsComputer' ? 'Computer' : 'Player 2';\n    resetGame();\n  }\n\n  function createPlaceSlots() {\n    const labels = ['Ones', 'Tens', 'Hundreds', 'Thousands', 'Ten-Thousands'];\n    elements.p1Grid.innerHTML = '';\n    elements.p2Grid.innerHTML = '';\n\n    for (let i = state.difficulty - 1; i >= 0; i--) {\n      const slot1 = createSlot(i, 1);\n      const slot2 = createSlot(i, 2);\n      elements.p1Grid.appendChild(slot1);\n      elements.p2Grid.appendChild(slot2);\n    }\n  }\n\n  function createSlot(index, player) {\n    const labels = ['Ones', 'Tens', 'Hundreds', 'Thousands', 'Ten-Thousands'];\n    const slot = document.createElement('div');\n    slot.className = 'place-slot';\n    slot.dataset.index = index;\n    slot.dataset.player = player;\n    slot.innerHTML = `\n      <div class=\"place-label\">${labels[index]}</div>\n      <div class=\"place-digit\">-</div>\n    `;\n    slot.addEventListener('click', () => handleSlotClick(slot));\n    return slot;\n  }\n\n  function handleSlotClick(slot) {\n    if (state.gameOver) return;\n    if (state.currentRoll === null) return;\n    const player = parseInt(slot.dataset.player);\n    if (player !== state.currentPlayer) return;\n    if (slot.classList.contains('filled')) return;\n\n    const index = parseInt(slot.dataset.index);\n    state.players[player].digits[index] = state.currentRoll;\n\n    slot.querySelector('.place-digit').textContent = state.currentRoll;\n    slot.classList.add('filled');\n\n    updateFinalNumber(player);\n\n    // Check if both players have filled all their slots\n    const p1Filled = state.players[1].digits.filter(d => d !== undefined).length === state.difficulty;\n    const p2Filled = state.players[2].digits.filter(d => d !== undefined).length === state.difficulty;\n\n    if (p1Filled && p2Filled) {\n      endGame();\n    } else if (state.mode === '2players') {\n      // In 2-player mode, alternate turns after each placement\n      switchPlayer();\n    } else {\n      // In vs Computer mode, handle computer's turn\n      if (state.currentPlayer === 1) {\n        // Player just placed, now computer's turn\n        computerTakeTurn();\n      } else {\n        // Computer just placed, back to player\n        switchPlayer();\n      }\n    }\n  }\n\n  function rollDice() {\n    if (state.gameOver) return;\n    const roll = Math.floor(Math.random() * 6) + 1;\n    state.currentRoll = roll;\n    elements.rollBtn.disabled = true;\n    updateDiceDisplay(state.currentPlayer, roll);\n    elements.statusMsg.textContent = `Player ${state.currentPlayer}: Place the ${roll}!`;\n  }\n\n  function updateDiceDisplay(player, value) {\n    const display = player === 1 ? elements.p1Dice : elements.p2Dice;\n    display.querySelector('.dice-value').textContent = value;\n  }\n\n  function updateFinalNumber(player) {\n    const digits = state.players[player].digits;\n    let number = 0;\n    for (let i = 0; i < digits.length; i++) {\n      if (digits[i] !== undefined) {\n        number += digits[i] * Math.pow(10, i);\n      }\n    }\n    const finalEl = player === 1 ? elements.p1Final : elements.p2Final;\n    finalEl.textContent = number || '-';\n  }\n\n  function switchPlayer() {\n    state.currentRoll = null;\n\n    // Toggle between player 1 and 2\n    state.currentPlayer = state.currentPlayer === 1 ? 2 : 1;\n\n    // Update active states\n    if (state.currentPlayer === 1) {\n      elements.player1Area.classList.add('active');\n      elements.player2Area.classList.remove('active');\n    } else {\n      elements.player1Area.classList.remove('active');\n      elements.player2Area.classList.add('active');\n    }\n\n    const playerName = state.currentPlayer === 1 ? 'Player 1' :\n                       (state.mode === 'vsComputer' ? 'Computer' : 'Player 2');\n    elements.statusMsg.textContent = `${playerName}: Roll the dice!`;\n    elements.rollBtn.disabled = false;\n  }\n\n  async function computerTakeTurn() {\n    state.currentPlayer = 2;\n    state.currentRoll = null;\n    elements.player1Area.classList.remove('active');\n    elements.player2Area.classList.add('active');\n    elements.statusMsg.textContent = 'Computer is thinking...';\n    elements.rollBtn.disabled = true;\n\n    await sleep(800);\n    const roll = Math.floor(Math.random() * 6) + 1;\n    state.currentRoll = roll;\n    updateDiceDisplay(2, roll);\n    elements.statusMsg.textContent = `Computer rolled ${roll}...`;\n\n    await sleep(600);\n\n    // Computer strategy: place high numbers in high places, low numbers in low places\n    const availableSlots = [];\n    for (let i = 0; i < state.difficulty; i++) {\n      if (state.players[2].digits[i] === undefined) {\n        availableSlots.push(i);\n      }\n    }\n\n    let chosenIndex;\n    if (roll >= 5) {\n      // High roll: prefer highest available slot\n      chosenIndex = Math.max(...availableSlots);\n    } else if (roll <= 2) {\n      // Low roll: prefer lowest available slot\n      chosenIndex = Math.min(...availableSlots);\n    } else {\n      // Medium roll: prefer middle slots\n      availableSlots.sort((a, b) => {\n        const midA = Math.abs(a - state.difficulty / 2);\n        const midB = Math.abs(b - state.difficulty / 2);\n        return midA - midB;\n      });\n      chosenIndex = availableSlots[0];\n    }\n\n    state.players[2].digits[chosenIndex] = roll;\n    const slot = elements.p2Grid.querySelector(`[data-index=\"${chosenIndex}\"]`);\n    slot.querySelector('.place-digit').textContent = roll;\n    slot.classList.add('filled');\n    updateFinalNumber(2);\n\n    await sleep(500);\n\n    // Check if game is over\n    const p1Filled = state.players[1].digits.filter(d => d !== undefined).length === state.difficulty;\n    const p2Filled = state.players[2].digits.filter(d => d !== undefined).length === state.difficulty;\n\n    if (p1Filled && p2Filled) {\n      endGame();\n    } else {\n      switchPlayer();\n    }\n  }\n\n  function sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  function calculateFinalNumber(player) {\n    const digits = state.players[player].digits;\n    let number = 0;\n    for (let i = 0; i < digits.length; i++) {\n      if (digits[i] !== undefined) {\n        number += digits[i] * Math.pow(10, i);\n      }\n    }\n    return number;\n  }\n\n  function endGame() {\n    state.gameOver = true;\n    elements.rollBtn.disabled = true;\n\n    const p1Number = calculateFinalNumber(1);\n    const p2Number = calculateFinalNumber(2);\n\n    let winner;\n    if (p1Number > p2Number) {\n      winner = 1;\n      state.players[1].wins++;\n    } else if (p2Number > p1Number) {\n      winner = 2;\n      state.players[2].wins++;\n    } else {\n      winner = 0; // Tie\n    }\n\n    elements.p1Score.textContent = state.players[1].wins;\n    elements.p2Score.textContent = state.players[2].wins;\n\n    const p2Name = state.mode === 'vsComputer' ? 'Computer' : 'Player 2';\n\n    if (winner === 0) {\n      elements.winnerTitle.textContent = '\uD83E\uDD1D It\\'s a Tie!';\n    } else {\n      const winnerName = winner === 1 ? 'Player 1' : p2Name;\n      elements.winnerTitle.textContent = `\uD83C\uDF89 ${winnerName} Wins!`;\n    }\n\n    elements.winnerP1.innerHTML = `Player 1: <strong>${p1Number}</strong>`;\n    elements.winnerP2.innerHTML = `${p2Name}: <strong>${p2Number}</strong>`;\n\n    elements.winnerModal.classList.add('show');\n  }\n\n  function resetGame() {\n    state.currentPlayer = 1;\n    state.currentRoll = null;\n    state.gameOver = false;\n    state.players[1].digits = [];\n    state.players[2].digits = [];\n\n    elements.player1Area.classList.add('active');\n    elements.player2Area.classList.remove('active');\n    elements.rollBtn.disabled = false;\n    elements.statusMsg.textContent = 'Click \"Roll Dice\" to start!';\n    elements.winnerModal.classList.remove('show');\n\n    updateDiceDisplay(1, '?');\n    updateDiceDisplay(2, '?');\n    elements.p1Final.textContent = '-';\n    elements.p2Final.textContent = '-';\n\n    createPlaceSlots();\n  }\n\n  elements.difficultySelect.addEventListener('change', updateSettings);\n  elements.modeSelect.addEventListener('change', updateSettings);\n  elements.rollBtn.addEventListener('click', rollDice);\n  elements.newGameBtn.addEventListener('click', resetGame);\n  elements.playAgainBtn.addEventListener('click', resetGame);\n\n  // Initialize\n  createPlaceSlots();\n})();\n\n// Export init function if it exists\nif (typeof window !== 'undefined') {\n  // Initialization code runs automatically\n}\n"],
  "mappings": "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",
  "names": []
}

{
  "version": 3,
  "sources": ["../js/games/instruments-game.ts"],
  "sourcesContent": ["/**\n * instruments-game game logic\n * Migrated from instruments-game.html\n */\n\n// Import utilities\nimport { setCookie, getCookie } from '../storage-utils';\n\n// Declare globals that might be used\ndeclare const window: any;\ndeclare const document: any;\n\ninterface Instrument {\n    name: string;\n    family: string;\n    visual: string;\n    description: string;\n}\n\ntype QuestionType = 'identify' | 'family';\ntype GameMode = 'identify' | 'family' | 'mixed';\n\nclass InstrumentsGame {\n            private instruments: Instrument[];\n            private currentInstrument: Instrument | null;\n            private currentQuestion: QuestionType | null;\n            private selectedAnswer: string | null;\n            private score: number;\n            private level: number;\n            private streak: number;\n            private gameMode: GameMode;\n            private scoreElement!: HTMLElement | null;\n            private levelElement!: HTMLElement | null;\n            private streakElement!: HTMLElement | null;\n            private instrumentDisplay!: HTMLElement | null;\n            private instrumentVisual!: HTMLImageElement | null;\n            private instrumentName!: HTMLElement | null;\n            private questionText!: HTMLElement | null;\n            private resultDisplay!: HTMLElement | null;\n            private optionsContainer!: HTMLElement | null;\n            private gameModeSelect!: HTMLSelectElement | null;\n            private newQuestionBtn!: HTMLElement | null;\n            private showAnswerBtn!: HTMLButtonElement | null;\n\n            constructor() {\n                this.instruments = [\n                    {\n                        name: 'Violin',\n                        family: 'String',\n                        visual: 'images/instruments/violin.jpg',\n                        description: 'A small string instrument played with a bow'\n                    },\n                    {\n                        name: 'Cello',\n                        family: 'String',\n                        visual: 'images/instruments/cello.jpg',\n                        description: 'A large string instrument played with a bow, held between the knees'\n                    },\n                    {\n                        name: 'Trumpet',\n                        family: 'Wind',\n                        visual: 'images/instruments/trumpet.jpg',\n                        description: 'A brass wind instrument with valves'\n                    },\n                    {\n                        name: 'Horn',\n                        family: 'Wind',\n                        visual: 'images/instruments/horn.jpg',\n                        description: 'A brass wind instrument with a curved shape'\n                    },\n                    {\n                        name: 'Trombone',\n                        family: 'Wind',\n                        visual: 'images/instruments/trombone.jpg',\n                        description: 'A brass wind instrument with a sliding tube'\n                    },\n                    {\n                        name: 'Flute',\n                        family: 'Wind',\n                        visual: 'images/instruments/flute.jpg',\n                        description: 'A woodwind instrument played by blowing across a hole'\n                    },\n                    {\n                        name: 'Oboe',\n                        family: 'Wind',\n                        visual: 'images/instruments/oboe.jpg',\n                        description: 'A woodwind instrument with a double reed'\n                    },\n                    {\n                        name: 'Clarinet',\n                        family: 'Wind',\n                        visual: 'images/instruments/clarinet.jpg',\n                        description: 'A woodwind instrument with a single reed'\n                    },\n                    {\n                        name: 'Bassoon',\n                        family: 'Wind',\n                        visual: 'images/instruments/bassoon.jpg',\n                        description: 'A large woodwind instrument with a double reed'\n                    },\n                    {\n                        name: 'Bass Drum',\n                        family: 'Percussion',\n                        visual: 'images/instruments/bass_drum.jpg',\n                        description: 'A large drum that produces low-pitched sounds'\n                    },\n                    {\n                        name: 'Timpani',\n                        family: 'Percussion',\n                        visual: 'images/instruments/timpani.jpg',\n                        description: 'Tunable drums also called kettledrums'\n                    }\n                ];\n\n                this.currentInstrument = null;\n                this.currentQuestion = null;\n                this.selectedAnswer = null;\n                this.score = 0;\n                this.level = 1;\n                this.streak = 0;\n                this.gameMode = 'identify';\n\n                this.initializeElements();\n                this.attachEventListeners();\n                this.updateDisplay();\n            }\n\n            initializeElements(): void {\n                this.scoreElement = document.getElementById('score');\n                this.levelElement = document.getElementById('level');\n                this.streakElement = document.getElementById('streak');\n                this.instrumentDisplay = document.getElementById('instrumentDisplay');\n                this.instrumentVisual = document.getElementById('instrumentVisual') as HTMLImageElement;\n                this.instrumentName = document.getElementById('instrumentName');\n                this.questionText = document.getElementById('questionText');\n                this.resultDisplay = document.getElementById('resultDisplay');\n                this.optionsContainer = document.getElementById('optionsContainer');\n                this.gameModeSelect = document.getElementById('gameMode') as HTMLSelectElement;\n\n                this.newQuestionBtn = document.getElementById('newQuestionBtn');\n                this.showAnswerBtn = document.getElementById('showAnswerBtn') as HTMLButtonElement;\n            }\n\n            attachEventListeners(): void {\n                this.newQuestionBtn!.addEventListener('click', () => this.generateNewQuestion());\n                this.showAnswerBtn!.addEventListener('click', () => this.showAnswer());\n                this.gameModeSelect!.addEventListener('change', (e: Event) => {\n                    const target = e.target as HTMLSelectElement;\n                    this.gameMode = target.value as GameMode;\n                });\n            }\n\n            generateNewQuestion(): void {\n                // Reset game state\n                this.selectedAnswer = null;\n                this.resultDisplay!.style.display = 'none';\n                this.clearOptions();\n\n                // Select random instrument\n                this.currentInstrument = this.instruments[Math.floor(Math.random() * this.instruments.length)];\n\n                // Determine question type based on game mode\n                if (this.gameMode === 'mixed') {\n                    this.currentQuestion = Math.random() < 0.5 ? 'identify' : 'family';\n                } else {\n                    this.currentQuestion = this.gameMode as QuestionType;\n                }\n\n                this.displayInstrument();\n                this.generateOptions();\n\n                this.showAnswerBtn!.disabled = false;\n            }\n\n            displayInstrument(): void {\n                this.instrumentVisual!.src = this.currentInstrument!.visual;\n                this.instrumentVisual!.alt = this.currentInstrument!.name;\n\n                if (this.currentQuestion === 'identify') {\n                    this.instrumentName!.textContent = '?';\n                    this.questionText!.textContent = 'What instrument is this?';\n                } else if (this.currentQuestion === 'family') {\n                    this.instrumentName!.textContent = this.currentInstrument!.name;\n                    this.questionText!.textContent = 'What family does this instrument belong to?';\n                }\n            }\n\n            generateOptions(): void {\n                this.optionsContainer!.innerHTML = '';\n\n                let options: string[] = [];\n                let correctAnswer = '';\n\n                if (this.currentQuestion === 'identify') {\n                    // Generate instrument name options\n                    correctAnswer = this.currentInstrument!.name;\n                    options = [correctAnswer];\n\n                    // Add 3 random wrong answers\n                    const otherInstruments = this.instruments.filter(inst => inst.name !== correctAnswer);\n                    while (options.length < 4) {\n                        const randomInst = otherInstruments[Math.floor(Math.random() * otherInstruments.length)];\n                        if (!options.includes(randomInst.name)) {\n                            options.push(randomInst.name);\n                        }\n                    }\n                } else if (this.currentQuestion === 'family') {\n                    // Generate family options\n                    correctAnswer = this.currentInstrument!.family;\n                    options = ['String', 'Wind', 'Percussion'];\n                }\n\n                // Shuffle options\n                options = this.shuffleArray(options);\n\n                // Create option buttons\n                options.forEach(option => {\n                    const button = document.createElement('button');\n                    button.className = 'option-button';\n                    button.textContent = option;\n                    button.addEventListener('click', () => this.selectAnswer(option, button, correctAnswer));\n                    this.optionsContainer!.appendChild(button);\n                });\n            }\n\n            selectAnswer(answer: string, button: HTMLElement, correctAnswer: string): void {\n                // Disable all buttons\n                const allButtons = document.querySelectorAll('.option-button');\n                allButtons.forEach((btn: Element) => {\n                    const htmlBtn = btn as HTMLElement;\n                    htmlBtn.style.pointerEvents = 'none';\n                });\n\n                this.selectedAnswer = answer;\n                const isCorrect = answer === correctAnswer;\n\n                // Show visual feedback\n                if (isCorrect) {\n                    button.classList.add('correct');\n                } else {\n                    button.classList.add('incorrect');\n                    // Highlight correct answer\n                    allButtons.forEach((btn: Element) => {\n                        if (btn.textContent === correctAnswer) {\n                            btn.classList.add('correct');\n                        }\n                    });\n                }\n\n                this.showResult(isCorrect, correctAnswer);\n\n                if (isCorrect) {\n                    this.score += 15 + (this.level * 5);\n                    this.streak++;\n\n                    if (this.streak % 5 === 0) {\n                        this.level++;\n                    }\n                } else {\n                    this.streak = 0;\n                }\n\n                this.updateDisplay();\n\n                // Reset for next round\n                setTimeout(() => {\n                    this.clearOptions();\n                    this.showAnswerBtn!.disabled = true;\n                }, 3000);\n            }\n\n            showResult(isCorrect: boolean, correctAnswer: string): void {\n                this.resultDisplay!.style.display = 'flex';\n                this.resultDisplay!.className = `result-display ${isCorrect ? 'correct' : 'incorrect'}`;\n\n                if (isCorrect) {\n                    this.resultDisplay!.textContent = '\uD83C\uDF89 Correct! Well done!';\n                } else {\n                    if (this.currentQuestion === 'identify') {\n                        this.resultDisplay!.textContent = `\u274C Incorrect. This is a ${correctAnswer}.`;\n                    } else {\n                        this.resultDisplay!.textContent = `\u274C Incorrect. The ${this.currentInstrument!.name} belongs to the ${correctAnswer} family.`;\n                    }\n                }\n\n                // Show instrument description\n                setTimeout(() => {\n                    this.resultDisplay!.textContent += ` ${this.currentInstrument!.description}`;\n                }, 1500);\n            }\n\n            showAnswer(): void {\n                this.instrumentName!.textContent = this.currentInstrument!.name;\n                this.questionText!.textContent = `This is a ${this.currentInstrument!.name} from the ${this.currentInstrument!.family} family.`;\n\n                // Highlight correct answer\n                const allButtons = document.querySelectorAll('.option-button');\n                const correctAnswer = this.currentQuestion === 'identify' ?\n                    this.currentInstrument!.name :\n                    this.currentInstrument!.family;\n\n                allButtons.forEach((button: Element) => {\n                    const htmlBtn = button as HTMLElement;\n                    if (button.textContent === correctAnswer) {\n                        button.classList.add('correct');\n                    }\n                    htmlBtn.style.pointerEvents = 'none';\n                });\n\n                this.showAnswerBtn!.disabled = true;\n\n                // Show description\n                this.resultDisplay!.style.display = 'flex';\n                this.resultDisplay!.className = 'result-display';\n                this.resultDisplay!.style.background = '#e2e3e5';\n                this.resultDisplay!.style.color = '#383d41';\n                this.resultDisplay!.style.border = '2px solid #d6d8db';\n                this.resultDisplay!.textContent = this.currentInstrument!.description;\n            }\n\n            clearOptions(): void {\n                const allButtons = document.querySelectorAll('.option-button');\n                allButtons.forEach((button: Element) => {\n                    const htmlBtn = button as HTMLElement;\n                    htmlBtn.style.pointerEvents = 'auto';\n                    button.classList.remove('selected', 'correct', 'incorrect');\n                });\n            }\n\n            shuffleArray<T>(array: T[]): T[] {\n                const shuffled = [...array];\n                for (let i = shuffled.length - 1; i > 0; i--) {\n                    const j = Math.floor(Math.random() * (i + 1));\n                    [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];\n                }\n                return shuffled;\n            }\n\n            updateDisplay(): void {\n                this.scoreElement!.textContent = String(this.score);\n                this.levelElement!.textContent = String(this.level);\n                this.streakElement!.textContent = String(this.streak);\n            }\n        }\n\n        // Initialize game when page loads\n        document.addEventListener('DOMContentLoaded', () => {\n            new InstrumentsGame();\n        });\n\n// Export init function if it exists\nif (typeof window !== 'undefined') {\n  // Initialization code runs automatically\n}\n"],
  "mappings": ";;;AAsBA,MAAM,kBAAN,MAAsB;AAAA,IAsBV,cAAc;AACV,WAAK,cAAc;AAAA,QACf;AAAA,UACI,MAAM;AAAA,UACN,QAAQ;AAAA,UACR,QAAQ;AAAA,UACR,aAAa;AAAA,QACjB;AAAA,QACA;AAAA,UACI,MAAM;AAAA,UACN,QAAQ;AAAA,UACR,QAAQ;AAAA,UACR,aAAa;AAAA,QACjB;AAAA,QACA;AAAA,UACI,MAAM;AAAA,UACN,QAAQ;AAAA,UACR,QAAQ;AAAA,UACR,aAAa;AAAA,QACjB;AAAA,QACA;AAAA,UACI,MAAM;AAAA,UACN,QAAQ;AAAA,UACR,QAAQ;AAAA,UACR,aAAa;AAAA,QACjB;AAAA,QACA;AAAA,UACI,MAAM;AAAA,UACN,QAAQ;AAAA,UACR,QAAQ;AAAA,UACR,aAAa;AAAA,QACjB;AAAA,QACA;AAAA,UACI,MAAM;AAAA,UACN,QAAQ;AAAA,UACR,QAAQ;AAAA,UACR,aAAa;AAAA,QACjB;AAAA,QACA;AAAA,UACI,MAAM;AAAA,UACN,QAAQ;AAAA,UACR,QAAQ;AAAA,UACR,aAAa;AAAA,QACjB;AAAA,QACA;AAAA,UACI,MAAM;AAAA,UACN,QAAQ;AAAA,UACR,QAAQ;AAAA,UACR,aAAa;AAAA,QACjB;AAAA,QACA;AAAA,UACI,MAAM;AAAA,UACN,QAAQ;AAAA,UACR,QAAQ;AAAA,UACR,aAAa;AAAA,QACjB;AAAA,QACA;AAAA,UACI,MAAM;AAAA,UACN,QAAQ;AAAA,UACR,QAAQ;AAAA,UACR,aAAa;AAAA,QACjB;AAAA,QACA;AAAA,UACI,MAAM;AAAA,UACN,QAAQ;AAAA,UACR,QAAQ;AAAA,UACR,aAAa;AAAA,QACjB;AAAA,MACJ;AAEA,WAAK,oBAAoB;AACzB,WAAK,kBAAkB;AACvB,WAAK,iBAAiB;AACtB,WAAK,QAAQ;AACb,WAAK,QAAQ;AACb,WAAK,SAAS;AACd,WAAK,WAAW;AAEhB,WAAK,mBAAmB;AACxB,WAAK,qBAAqB;AAC1B,WAAK,cAAc;AAAA,IACvB;AAAA,IAEA,qBAA2B;AACvB,WAAK,eAAe,SAAS,eAAe,OAAO;AACnD,WAAK,eAAe,SAAS,eAAe,OAAO;AACnD,WAAK,gBAAgB,SAAS,eAAe,QAAQ;AACrD,WAAK,oBAAoB,SAAS,eAAe,mBAAmB;AACpE,WAAK,mBAAmB,SAAS,eAAe,kBAAkB;AAClE,WAAK,iBAAiB,SAAS,eAAe,gBAAgB;AAC9D,WAAK,eAAe,SAAS,eAAe,cAAc;AAC1D,WAAK,gBAAgB,SAAS,eAAe,eAAe;AAC5D,WAAK,mBAAmB,SAAS,eAAe,kBAAkB;AAClE,WAAK,iBAAiB,SAAS,eAAe,UAAU;AAExD,WAAK,iBAAiB,SAAS,eAAe,gBAAgB;AAC9D,WAAK,gBAAgB,SAAS,eAAe,eAAe;AAAA,IAChE;AAAA,IAEA,uBAA6B;AACzB,WAAK,eAAgB,iBAAiB,SAAS,MAAM,KAAK,oBAAoB,CAAC;AAC/E,WAAK,cAAe,iBAAiB,SAAS,MAAM,KAAK,WAAW,CAAC;AACrE,WAAK,eAAgB,iBAAiB,UAAU,CAAC,MAAa;AAC1D,cAAM,SAAS,EAAE;AACjB,aAAK,WAAW,OAAO;AAAA,MAC3B,CAAC;AAAA,IACL;AAAA,IAEA,sBAA4B;AAExB,WAAK,iBAAiB;AACtB,WAAK,cAAe,MAAM,UAAU;AACpC,WAAK,aAAa;AAGlB,WAAK,oBAAoB,KAAK,YAAY,KAAK,MAAM,KAAK,OAAO,IAAI,KAAK,YAAY,MAAM,CAAC;AAG7F,UAAI,KAAK,aAAa,SAAS;AAC3B,aAAK,kBAAkB,KAAK,OAAO,IAAI,MAAM,aAAa;AAAA,MAC9D,OAAO;AACH,aAAK,kBAAkB,KAAK;AAAA,MAChC;AAEA,WAAK,kBAAkB;AACvB,WAAK,gBAAgB;AAErB,WAAK,cAAe,WAAW;AAAA,IACnC;AAAA,IAEA,oBAA0B;AACtB,WAAK,iBAAkB,MAAM,KAAK,kBAAmB;AACrD,WAAK,iBAAkB,MAAM,KAAK,kBAAmB;AAErD,UAAI,KAAK,oBAAoB,YAAY;AACrC,aAAK,eAAgB,cAAc;AACnC,aAAK,aAAc,cAAc;AAAA,MACrC,WAAW,KAAK,oBAAoB,UAAU;AAC1C,aAAK,eAAgB,cAAc,KAAK,kBAAmB;AAC3D,aAAK,aAAc,cAAc;AAAA,MACrC;AAAA,IACJ;AAAA,IAEA,kBAAwB;AACpB,WAAK,iBAAkB,YAAY;AAEnC,UAAI,UAAoB,CAAC;AACzB,UAAI,gBAAgB;AAEpB,UAAI,KAAK,oBAAoB,YAAY;AAErC,wBAAgB,KAAK,kBAAmB;AACxC,kBAAU,CAAC,aAAa;AAGxB,cAAM,mBAAmB,KAAK,YAAY,OAAO,UAAQ,KAAK,SAAS,aAAa;AACpF,eAAO,QAAQ,SAAS,GAAG;AACvB,gBAAM,aAAa,iBAAiB,KAAK,MAAM,KAAK,OAAO,IAAI,iBAAiB,MAAM,CAAC;AACvF,cAAI,CAAC,QAAQ,SAAS,WAAW,IAAI,GAAG;AACpC,oBAAQ,KAAK,WAAW,IAAI;AAAA,UAChC;AAAA,QACJ;AAAA,MACJ,WAAW,KAAK,oBAAoB,UAAU;AAE1C,wBAAgB,KAAK,kBAAmB;AACxC,kBAAU,CAAC,UAAU,QAAQ,YAAY;AAAA,MAC7C;AAGA,gBAAU,KAAK,aAAa,OAAO;AAGnC,cAAQ,QAAQ,YAAU;AACtB,cAAM,SAAS,SAAS,cAAc,QAAQ;AAC9C,eAAO,YAAY;AACnB,eAAO,cAAc;AACrB,eAAO,iBAAiB,SAAS,MAAM,KAAK,aAAa,QAAQ,QAAQ,aAAa,CAAC;AACvF,aAAK,iBAAkB,YAAY,MAAM;AAAA,MAC7C,CAAC;AAAA,IACL;AAAA,IAEA,aAAa,QAAgB,QAAqB,eAA6B;AAE3E,YAAM,aAAa,SAAS,iBAAiB,gBAAgB;AAC7D,iBAAW,QAAQ,CAAC,QAAiB;AACjC,cAAM,UAAU;AAChB,gBAAQ,MAAM,gBAAgB;AAAA,MAClC,CAAC;AAED,WAAK,iBAAiB;AACtB,YAAM,YAAY,WAAW;AAG7B,UAAI,WAAW;AACX,eAAO,UAAU,IAAI,SAAS;AAAA,MAClC,OAAO;AACH,eAAO,UAAU,IAAI,WAAW;AAEhC,mBAAW,QAAQ,CAAC,QAAiB;AACjC,cAAI,IAAI,gBAAgB,eAAe;AACnC,gBAAI,UAAU,IAAI,SAAS;AAAA,UAC/B;AAAA,QACJ,CAAC;AAAA,MACL;AAEA,WAAK,WAAW,WAAW,aAAa;AAExC,UAAI,WAAW;AACX,aAAK,SAAS,KAAM,KAAK,QAAQ;AACjC,aAAK;AAEL,YAAI,KAAK,SAAS,MAAM,GAAG;AACvB,eAAK;AAAA,QACT;AAAA,MACJ,OAAO;AACH,aAAK,SAAS;AAAA,MAClB;AAEA,WAAK,cAAc;AAGnB,iBAAW,MAAM;AACb,aAAK,aAAa;AAClB,aAAK,cAAe,WAAW;AAAA,MACnC,GAAG,GAAI;AAAA,IACX;AAAA,IAEA,WAAW,WAAoB,eAA6B;AACxD,WAAK,cAAe,MAAM,UAAU;AACpC,WAAK,cAAe,YAAY,kBAAkB,YAAY,YAAY,WAAW;AAErF,UAAI,WAAW;AACX,aAAK,cAAe,cAAc;AAAA,MACtC,OAAO;AACH,YAAI,KAAK,oBAAoB,YAAY;AACrC,eAAK,cAAe,cAAc,+BAA0B,aAAa;AAAA,QAC7E,OAAO;AACH,eAAK,cAAe,cAAc,yBAAoB,KAAK,kBAAmB,IAAI,mBAAmB,aAAa;AAAA,QACtH;AAAA,MACJ;AAGA,iBAAW,MAAM;AACb,aAAK,cAAe,eAAe,IAAI,KAAK,kBAAmB,WAAW;AAAA,MAC9E,GAAG,IAAI;AAAA,IACX;AAAA,IAEA,aAAmB;AACf,WAAK,eAAgB,cAAc,KAAK,kBAAmB;AAC3D,WAAK,aAAc,cAAc,aAAa,KAAK,kBAAmB,IAAI,aAAa,KAAK,kBAAmB,MAAM;AAGrH,YAAM,aAAa,SAAS,iBAAiB,gBAAgB;AAC7D,YAAM,gBAAgB,KAAK,oBAAoB,aAC3C,KAAK,kBAAmB,OACxB,KAAK,kBAAmB;AAE5B,iBAAW,QAAQ,CAAC,WAAoB;AACpC,cAAM,UAAU;AAChB,YAAI,OAAO,gBAAgB,eAAe;AACtC,iBAAO,UAAU,IAAI,SAAS;AAAA,QAClC;AACA,gBAAQ,MAAM,gBAAgB;AAAA,MAClC,CAAC;AAED,WAAK,cAAe,WAAW;AAG/B,WAAK,cAAe,MAAM,UAAU;AACpC,WAAK,cAAe,YAAY;AAChC,WAAK,cAAe,MAAM,aAAa;AACvC,WAAK,cAAe,MAAM,QAAQ;AAClC,WAAK,cAAe,MAAM,SAAS;AACnC,WAAK,cAAe,cAAc,KAAK,kBAAmB;AAAA,IAC9D;AAAA,IAEA,eAAqB;AACjB,YAAM,aAAa,SAAS,iBAAiB,gBAAgB;AAC7D,iBAAW,QAAQ,CAAC,WAAoB;AACpC,cAAM,UAAU;AAChB,gBAAQ,MAAM,gBAAgB;AAC9B,eAAO,UAAU,OAAO,YAAY,WAAW,WAAW;AAAA,MAC9D,CAAC;AAAA,IACL;AAAA,IAEA,aAAgB,OAAiB;AAC7B,YAAM,WAAW,CAAC,GAAG,KAAK;AAC1B,eAAS,IAAI,SAAS,SAAS,GAAG,IAAI,GAAG,KAAK;AAC1C,cAAM,IAAI,KAAK,MAAM,KAAK,OAAO,KAAK,IAAI,EAAE;AAC5C,SAAC,SAAS,CAAC,GAAG,SAAS,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,SAAS,CAAC,CAAC;AAAA,MAC1D;AACA,aAAO;AAAA,IACX;AAAA,IAEA,gBAAsB;AAClB,WAAK,aAAc,cAAc,OAAO,KAAK,KAAK;AAClD,WAAK,aAAc,cAAc,OAAO,KAAK,KAAK;AAClD,WAAK,cAAe,cAAc,OAAO,KAAK,MAAM;AAAA,IACxD;AAAA,EACJ;AAGA,WAAS,iBAAiB,oBAAoB,MAAM;AAChD,QAAI,gBAAgB;AAAA,EACxB,CAAC;AAGT,MAAI,OAAO,WAAW,aAAa;AAAA,EAEnC;",
  "names": []
}

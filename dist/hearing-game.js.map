{
  "version": 3,
  "sources": ["../js/games/hearing-game.ts"],
  "sourcesContent": ["// @ts-nocheck\n/**\n * hearing-game game logic\n * Migrated from hearing-game.html\n */\n\n// Import utilities\nimport { setCookie, getCookie } from '../storage-utils';\n\n// Declare globals that might be used\ndeclare const window: any;\ndeclare const document: any;\n\nclass HearingGame {\n            constructor() {\n                this.patterns = [\n                    {\n                        name: 'Ascending',\n                        description: 'Going Up',\n                        visual: '\u266A \u2197 \u266A \u2197 \u266A',\n                        generator: () => this.generateAscending()\n                    },\n                    {\n                        name: 'Descending',\n                        description: 'Going Down',\n                        visual: '\u266A \u2198 \u266A \u2198 \u266A',\n                        generator: () => this.generateDescending()\n                    },\n                    {\n                        name: 'Up-down',\n                        description: 'Up then Down',\n                        visual: '\u266A \u2197 \u266A \u2198 \u266A',\n                        generator: () => this.generateUpDown()\n                    },\n                    {\n                        name: 'Down-up',\n                        description: 'Down then Up',\n                        visual: '\u266A \u2198 \u266A \u2197 \u266A',\n                        generator: () => this.generateDownUp()\n                    },\n                    {\n                        name: 'Repeat',\n                        description: 'Same Note',\n                        visual: '\u266A \u2192 \u266A \u2192 \u266A',\n                        generator: () => this.generateRepeat()\n                    }\n                ];\n\n                this.baseFrequencies = [\n                    261.63, // C4\n                    293.66, // D4\n                    329.63, // E4\n                    349.23, // F4\n                    392.00, // G4\n                    440.00, // A4\n                    493.88, // B4\n                    523.25  // C5\n                ];\n\n                this.currentSequence = [];\n                this.currentPattern = null;\n                this.selectedPattern = null;\n                this.score = 0;\n                this.level = 1;\n                this.streak = 0;\n                this.volume = 0.5;\n\n                // Audio context\n                this.audioContext = null;\n                this.initAudio();\n\n                this.initializeElements();\n                this.createPatternOptions();\n                this.attachEventListeners();\n                this.updateDisplay();\n            }\n\n            async initAudio() {\n                try {\n                    this.audioContext = new (window.AudioContext || window.webkitAudioContext)();\n                } catch (error) {\n                    console.warn('Audio context not available:', error);\n                }\n            }\n\n            initializeElements() {\n                this.scoreElement = document.getElementById('score');\n                this.levelElement = document.getElementById('level');\n                this.streakElement = document.getElementById('streak');\n                this.audioDisplay = document.getElementById('audioDisplay');\n                this.sequenceDisplay = document.getElementById('sequenceDisplay');\n                this.patternsContainer = document.getElementById('patternsContainer');\n                this.volumeSlider = document.getElementById('volumeSlider');\n                this.volumeValue = document.getElementById('volumeValue');\n\n                this.newSequenceBtn = document.getElementById('newSequenceBtn');\n                this.playBtn = document.getElementById('playBtn');\n                this.checkBtn = document.getElementById('checkBtn');\n            }\n\n            createPatternOptions() {\n                this.patternsContainer.innerHTML = '';\n\n                this.patterns.forEach((pattern, index) => {\n                    const option = document.createElement('div');\n                    option.className = 'pattern-option';\n                    option.dataset.pattern = pattern.name;\n\n                    option.innerHTML = `\n                        <div class=\"pattern-visual\">${pattern.visual}</div>\n                        <div class=\"pattern-label\">${pattern.name}</div>\n                        <div style=\"font-size: 0.9em; color: #666;\">${pattern.description}</div>\n                    `;\n\n                    option.addEventListener('click', () => this.selectPattern(pattern.name, option));\n                    this.patternsContainer.appendChild(option);\n                });\n            }\n\n            attachEventListeners() {\n                this.newSequenceBtn.addEventListener('click', () => this.generateNewSequence());\n                this.playBtn.addEventListener('click', () => this.playCurrentSequence());\n                this.checkBtn.addEventListener('click', () => this.checkAnswer());\n\n                this.volumeSlider.addEventListener('input', (e) => {\n                    this.volume = e.target.value / 100;\n                    this.volumeValue.textContent = `${e.target.value}%`;\n                });\n            }\n\n            generateNewSequence() {\n                // Reset game state\n                this.currentSequence = [];\n                this.selectedPattern = null;\n                this.clearPatternSelection();\n\n                // Choose a random pattern\n                this.currentPattern = this.patterns[Math.floor(Math.random() * this.patterns.length)];\n\n                // Generate sequence based on pattern\n                this.currentSequence = this.currentPattern.generator();\n\n                this.audioDisplay.textContent = 'Playing sequence... \uD83C\uDFB5';\n                this.sequenceDisplay.textContent = 'Listen carefully and select the pattern you hear...';\n\n                this.playCurrentSequence();\n\n                this.playBtn.disabled = false;\n                this.checkBtn.disabled = false;\n            }\n\n            generateAscending() {\n                // Three notes going up\n                const start = Math.floor(Math.random() * 4); // 0-3\n                return [\n                    this.baseFrequencies[start],\n                    this.baseFrequencies[start + 2],\n                    this.baseFrequencies[start + 4]\n                ];\n            }\n\n            generateDescending() {\n                // Three notes going down\n                const start = Math.floor(Math.random() * 4) + 4; // 4-7\n                return [\n                    this.baseFrequencies[start],\n                    this.baseFrequencies[start - 2],\n                    this.baseFrequencies[start - 4]\n                ];\n            }\n\n            generateUpDown() {\n                // Low, high, medium\n                const base = Math.floor(Math.random() * 3); // 0-2\n                return [\n                    this.baseFrequencies[base],\n                    this.baseFrequencies[base + 4],\n                    this.baseFrequencies[base + 2]\n                ];\n            }\n\n            generateDownUp() {\n                // High, low, medium\n                const base = Math.floor(Math.random() * 3) + 4; // 4-6\n                return [\n                    this.baseFrequencies[base],\n                    this.baseFrequencies[base - 4],\n                    this.baseFrequencies[base - 2]\n                ];\n            }\n\n            generateRepeat() {\n                // Three notes of the same pitch\n                const base = Math.floor(Math.random() * 6) + 1; // 1-6\n                return [\n                    this.baseFrequencies[base],\n                    this.baseFrequencies[base],\n                    this.baseFrequencies[base]\n                ];\n            }\n\n\n            async playCurrentSequence() {\n                if (!this.audioContext || this.currentSequence.length === 0) return;\n\n                this.audioDisplay.textContent = 'Playing sequence... \uD83C\uDFB5';\n\n                for (let i = 0; i < this.currentSequence.length; i++) {\n                    this.playNote(this.currentSequence[i], 0.8);\n                    await this.sleep(900); // Pause between notes\n                }\n\n                this.audioDisplay.textContent = 'Select the pattern you heard!';\n            }\n\n            playNote(frequency, duration) {\n                if (!this.audioContext) return;\n\n                const oscillator = this.audioContext.createOscillator();\n                const gainNode = this.audioContext.createGain();\n\n                oscillator.connect(gainNode);\n                gainNode.connect(this.audioContext.destination);\n\n                oscillator.frequency.setValueAtTime(frequency, this.audioContext.currentTime);\n                oscillator.type = 'sine';\n\n                gainNode.gain.setValueAtTime(this.volume * 0.3, this.audioContext.currentTime);\n                gainNode.gain.exponentialRampToValueAtTime(0.01, this.audioContext.currentTime + duration);\n\n                oscillator.start(this.audioContext.currentTime);\n                oscillator.stop(this.audioContext.currentTime + duration);\n            }\n\n            sleep(ms) {\n                return new Promise(resolve => setTimeout(resolve, ms));\n            }\n\n            selectPattern(patternName, element) {\n                // Clear previous selection\n                this.clearPatternSelection();\n\n                // Set new selection\n                this.selectedPattern = patternName;\n                element.classList.add('selected');\n\n                this.sequenceDisplay.textContent = `Selected: ${patternName}`;\n            }\n\n            clearPatternSelection() {\n                document.querySelectorAll('.pattern-option').forEach(option => {\n                    option.classList.remove('selected', 'correct', 'incorrect');\n                });\n            }\n\n            checkAnswer() {\n                if (!this.selectedPattern) {\n                    this.sequenceDisplay.textContent = 'Please select a pattern first!';\n                    return;\n                }\n\n                const isCorrect = this.selectedPattern === this.currentPattern.name;\n                this.showResults(isCorrect);\n\n                if (isCorrect) {\n                    this.score += 20 + (this.level * 5);\n                    this.streak++;\n\n                    if (this.streak % 4 === 0) {\n                        this.level++;\n                        this.audioDisplay.textContent = `\uD83C\uDF89 Level Up! Now level ${this.level}!`;\n                    }\n                } else {\n                    this.streak = 0;\n                }\n\n                this.updateDisplay();\n\n                // Reset for next round\n                setTimeout(() => {\n                    this.clearPatternSelection();\n                    this.playBtn.disabled = true;\n                    this.checkBtn.disabled = true;\n                    this.sequenceDisplay.textContent = 'Ready for the next sequence...';\n                }, 3000);\n            }\n\n            showResults(isCorrect) {\n                // Show correct answer and user selection\n                document.querySelectorAll('.pattern-option').forEach(option => {\n                    const patternName = option.dataset.pattern;\n\n                    if (patternName === this.currentPattern.name) {\n                        option.classList.add('correct');\n                    } else if (patternName === this.selectedPattern && !isCorrect) {\n                        option.classList.add('incorrect');\n                    }\n                });\n\n                if (isCorrect) {\n                    this.audioDisplay.textContent = '\uD83C\uDF89 Excellent! You identified the pattern correctly!';\n                    this.sequenceDisplay.textContent = `\u2705 Correct! It was ${this.currentPattern.name}`;\n                } else {\n                    this.audioDisplay.textContent = '\u274C Not quite right. Try listening again!';\n                    this.sequenceDisplay.textContent = `\u274C The correct pattern was: ${this.currentPattern.name}`;\n                }\n            }\n\n            updateDisplay() {\n                this.scoreElement.textContent = this.score;\n                this.levelElement.textContent = this.level;\n                this.streakElement.textContent = this.streak;\n            }\n        }\n\n        // Initialize game when page loads\n        document.addEventListener('DOMContentLoaded', () => {\n            new HearingGame();\n        });\n\n// Export init function if it exists\nif (typeof window !== 'undefined') {\n  // Initialization code runs automatically\n}\n"],
  "mappings": "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",
  "names": []
}

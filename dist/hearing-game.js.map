{
  "version": 3,
  "sources": ["../js/games/hearing-game.ts"],
  "sourcesContent": ["/**\n * hearing-game game logic\n * Migrated from hearing-game.html\n */\n\n// Import utilities\nimport { setCookie, getCookie } from '../storage-utils';\n\n// Declare globals that might be used\ndeclare const window: any;\ndeclare const document: any;\n\ninterface Pattern {\n    name: string;\n    description: string;\n    visual: string;\n    generator: () => number[];\n}\n\nclass HearingGame {\n            private patterns: Pattern[];\n            private baseFrequencies: number[];\n            private currentSequence: number[];\n            private currentPattern: Pattern | null;\n            private selectedPattern: string | null;\n            private score: number;\n            private level: number;\n            private streak: number;\n            private volume: number;\n            private audioContext: AudioContext | null;\n            private scoreElement!: HTMLElement | null;\n            private levelElement!: HTMLElement | null;\n            private streakElement!: HTMLElement | null;\n            private audioDisplay!: HTMLElement | null;\n            private sequenceDisplay!: HTMLElement | null;\n            private patternsContainer!: HTMLElement | null;\n            private volumeSlider!: HTMLInputElement | null;\n            private volumeValue!: HTMLElement | null;\n            private newSequenceBtn!: HTMLElement | null;\n            private playBtn!: HTMLButtonElement | null;\n            private checkBtn!: HTMLButtonElement | null;\n\n            constructor() {\n                this.patterns = [\n                    {\n                        name: 'Ascending',\n                        description: 'Going Up',\n                        visual: '\u266A \u2197 \u266A \u2197 \u266A',\n                        generator: () => this.generateAscending()\n                    },\n                    {\n                        name: 'Descending',\n                        description: 'Going Down',\n                        visual: '\u266A \u2198 \u266A \u2198 \u266A',\n                        generator: () => this.generateDescending()\n                    },\n                    {\n                        name: 'Up-down',\n                        description: 'Up then Down',\n                        visual: '\u266A \u2197 \u266A \u2198 \u266A',\n                        generator: () => this.generateUpDown()\n                    },\n                    {\n                        name: 'Down-up',\n                        description: 'Down then Up',\n                        visual: '\u266A \u2198 \u266A \u2197 \u266A',\n                        generator: () => this.generateDownUp()\n                    },\n                    {\n                        name: 'Repeat',\n                        description: 'Same Note',\n                        visual: '\u266A \u2192 \u266A \u2192 \u266A',\n                        generator: () => this.generateRepeat()\n                    }\n                ];\n\n                this.baseFrequencies = [\n                    261.63, // C4\n                    293.66, // D4\n                    329.63, // E4\n                    349.23, // F4\n                    392.00, // G4\n                    440.00, // A4\n                    493.88, // B4\n                    523.25  // C5\n                ];\n\n                this.currentSequence = [];\n                this.currentPattern = null;\n                this.selectedPattern = null;\n                this.score = 0;\n                this.level = 1;\n                this.streak = 0;\n                this.volume = 0.5;\n\n                // Audio context\n                this.audioContext = null;\n                this.initAudio();\n\n                this.initializeElements();\n                this.createPatternOptions();\n                this.attachEventListeners();\n                this.updateDisplay();\n            }\n\n            async initAudio(): Promise<void> {\n                try {\n                    this.audioContext = new (window.AudioContext || window.webkitAudioContext)();\n                } catch (error) {\n                    console.warn('Audio context not available:', error);\n                }\n            }\n\n            initializeElements(): void {\n                this.scoreElement = document.getElementById('score');\n                this.levelElement = document.getElementById('level');\n                this.streakElement = document.getElementById('streak');\n                this.audioDisplay = document.getElementById('audioDisplay');\n                this.sequenceDisplay = document.getElementById('sequenceDisplay');\n                this.patternsContainer = document.getElementById('patternsContainer');\n                this.volumeSlider = document.getElementById('volumeSlider') as HTMLInputElement;\n                this.volumeValue = document.getElementById('volumeValue');\n\n                this.newSequenceBtn = document.getElementById('newSequenceBtn');\n                this.playBtn = document.getElementById('playBtn') as HTMLButtonElement;\n                this.checkBtn = document.getElementById('checkBtn') as HTMLButtonElement;\n            }\n\n            createPatternOptions(): void {\n                this.patternsContainer!.innerHTML = '';\n\n                this.patterns.forEach((pattern, index) => {\n                    const option = document.createElement('div');\n                    option.className = 'pattern-option';\n                    option.dataset.pattern = pattern.name;\n\n                    option.innerHTML = `\n                        <div class=\"pattern-visual\">${pattern.visual}</div>\n                        <div class=\"pattern-label\">${pattern.name}</div>\n                        <div style=\"font-size: 0.9em; color: #666;\">${pattern.description}</div>\n                    `;\n\n                    option.addEventListener('click', () => this.selectPattern(pattern.name, option));\n                    this.patternsContainer!.appendChild(option);\n                });\n            }\n\n            attachEventListeners(): void {\n                this.newSequenceBtn!.addEventListener('click', () => this.generateNewSequence());\n                this.playBtn!.addEventListener('click', () => this.playCurrentSequence());\n                this.checkBtn!.addEventListener('click', () => this.checkAnswer());\n\n                this.volumeSlider!.addEventListener('input', (e: Event) => {\n                    const target = e.target as HTMLInputElement;\n                    this.volume = Number(target.value) / 100;\n                    this.volumeValue!.textContent = `${target.value}%`;\n                });\n            }\n\n            generateNewSequence(): void {\n                // Reset game state\n                this.currentSequence = [];\n                this.selectedPattern = null;\n                this.clearPatternSelection();\n\n                // Choose a random pattern\n                this.currentPattern = this.patterns[Math.floor(Math.random() * this.patterns.length)];\n\n                // Generate sequence based on pattern\n                this.currentSequence = this.currentPattern.generator();\n\n                this.audioDisplay!.textContent = 'Playing sequence... \uD83C\uDFB5';\n                this.sequenceDisplay!.textContent = 'Listen carefully and select the pattern you hear...';\n\n                this.playCurrentSequence();\n\n                this.playBtn!.disabled = false;\n                this.checkBtn!.disabled = false;\n            }\n\n            generateAscending(): number[] {\n                // Three notes going up\n                const start = Math.floor(Math.random() * 4); // 0-3\n                return [\n                    this.baseFrequencies[start],\n                    this.baseFrequencies[start + 2],\n                    this.baseFrequencies[start + 4]\n                ];\n            }\n\n            generateDescending(): number[] {\n                // Three notes going down\n                const start = Math.floor(Math.random() * 4) + 4; // 4-7\n                return [\n                    this.baseFrequencies[start],\n                    this.baseFrequencies[start - 2],\n                    this.baseFrequencies[start - 4]\n                ];\n            }\n\n            generateUpDown(): number[] {\n                // Low, high, medium\n                const base = Math.floor(Math.random() * 3); // 0-2\n                return [\n                    this.baseFrequencies[base],\n                    this.baseFrequencies[base + 4],\n                    this.baseFrequencies[base + 2]\n                ];\n            }\n\n            generateDownUp(): number[] {\n                // High, low, medium\n                const base = Math.floor(Math.random() * 3) + 4; // 4-6\n                return [\n                    this.baseFrequencies[base],\n                    this.baseFrequencies[base - 4],\n                    this.baseFrequencies[base - 2]\n                ];\n            }\n\n            generateRepeat(): number[] {\n                // Three notes of the same pitch\n                const base = Math.floor(Math.random() * 6) + 1; // 1-6\n                return [\n                    this.baseFrequencies[base],\n                    this.baseFrequencies[base],\n                    this.baseFrequencies[base]\n                ];\n            }\n\n\n            async playCurrentSequence(): Promise<void> {\n                if (!this.audioContext || this.currentSequence.length === 0) return;\n\n                this.audioDisplay!.textContent = 'Playing sequence... \uD83C\uDFB5';\n\n                for (let i = 0; i < this.currentSequence.length; i++) {\n                    this.playNote(this.currentSequence[i], 0.8);\n                    await this.sleep(900); // Pause between notes\n                }\n\n                this.audioDisplay!.textContent = 'Select the pattern you heard!';\n            }\n\n            playNote(frequency: number, duration: number): void {\n                if (!this.audioContext) return;\n\n                const oscillator = this.audioContext.createOscillator();\n                const gainNode = this.audioContext.createGain();\n\n                oscillator.connect(gainNode);\n                gainNode.connect(this.audioContext.destination);\n\n                oscillator.frequency.setValueAtTime(frequency, this.audioContext.currentTime);\n                oscillator.type = 'sine';\n\n                gainNode.gain.setValueAtTime(this.volume * 0.3, this.audioContext.currentTime);\n                gainNode.gain.exponentialRampToValueAtTime(0.01, this.audioContext.currentTime + duration);\n\n                oscillator.start(this.audioContext.currentTime);\n                oscillator.stop(this.audioContext.currentTime + duration);\n            }\n\n            sleep(ms: number): Promise<void> {\n                return new Promise(resolve => setTimeout(resolve, ms));\n            }\n\n            selectPattern(patternName: string, element: HTMLElement): void {\n                // Clear previous selection\n                this.clearPatternSelection();\n\n                // Set new selection\n                this.selectedPattern = patternName;\n                element.classList.add('selected');\n\n                this.sequenceDisplay!.textContent = `Selected: ${patternName}`;\n            }\n\n            clearPatternSelection(): void {\n                document.querySelectorAll('.pattern-option').forEach((option: Element) => {\n                    option.classList.remove('selected', 'correct', 'incorrect');\n                });\n            }\n\n            checkAnswer(): void {\n                if (!this.selectedPattern) {\n                    this.sequenceDisplay!.textContent = 'Please select a pattern first!';\n                    return;\n                }\n\n                const isCorrect = this.selectedPattern === this.currentPattern!.name;\n                this.showResults(isCorrect);\n\n                if (isCorrect) {\n                    this.score += 20 + (this.level * 5);\n                    this.streak++;\n\n                    if (this.streak % 4 === 0) {\n                        this.level++;\n                        this.audioDisplay!.textContent = `\uD83C\uDF89 Level Up! Now level ${this.level}!`;\n                    }\n                } else {\n                    this.streak = 0;\n                }\n\n                this.updateDisplay();\n\n                // Reset for next round\n                setTimeout(() => {\n                    this.clearPatternSelection();\n                    this.playBtn!.disabled = true;\n                    this.checkBtn!.disabled = true;\n                    this.sequenceDisplay!.textContent = 'Ready for the next sequence...';\n                }, 3000);\n            }\n\n            showResults(isCorrect: boolean): void {\n                // Show correct answer and user selection\n                document.querySelectorAll('.pattern-option').forEach((option: Element) => {\n                    const el = option as HTMLElement;\n                    const patternName = el.dataset.pattern;\n\n                    if (patternName === this.currentPattern!.name) {\n                        option.classList.add('correct');\n                    } else if (patternName === this.selectedPattern && !isCorrect) {\n                        option.classList.add('incorrect');\n                    }\n                });\n\n                if (isCorrect) {\n                    this.audioDisplay!.textContent = '\uD83C\uDF89 Excellent! You identified the pattern correctly!';\n                    this.sequenceDisplay!.textContent = `\u2705 Correct! It was ${this.currentPattern!.name}`;\n                } else {\n                    this.audioDisplay!.textContent = '\u274C Not quite right. Try listening again!';\n                    this.sequenceDisplay!.textContent = `\u274C The correct pattern was: ${this.currentPattern!.name}`;\n                }\n            }\n\n            updateDisplay(): void {\n                this.scoreElement!.textContent = String(this.score);\n                this.levelElement!.textContent = String(this.level);\n                this.streakElement!.textContent = String(this.streak);\n            }\n        }\n\n        // Initialize game when page loads\n        document.addEventListener('DOMContentLoaded', () => {\n            new HearingGame();\n        });\n\n// Export init function if it exists\nif (typeof window !== 'undefined') {\n  // Initialization code runs automatically\n}\n"],
  "mappings": "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",
  "names": []
}

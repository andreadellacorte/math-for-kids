{
  "version": 3,
  "sources": ["../js/games/notation-game.ts"],
  "sourcesContent": ["/**\n * notation-game game logic\n * Migrated from notation-game.html\n */\n\n// Import utilities\nimport { setCookie, getCookie } from '../storage-utils';\n\n// Declare globals that might be used\ndeclare const window: any;\ndeclare const document: any;\n\ninterface Note {\n    name: string;\n    solfege: string;\n    position: string;\n    offset: number;\n    octave: number;\n}\n\nclass NotationGame {\n            private notes: Note[];\n            private currentSequence: Note[];\n            private userSequence: Note[];\n            private score: number;\n            private level: number;\n            private streak: number;\n            private audioContext: AudioContext | null;\n            private scoreElement!: HTMLElement | null;\n            private levelElement!: HTMLElement | null;\n            private streakElement!: HTMLElement | null;\n            private staffElement!: HTMLElement | null;\n            private userSequenceElement!: HTMLElement | null;\n            private keyboardElement!: HTMLElement | null;\n            private newSequenceBtn!: HTMLElement | null;\n            private playBtn!: HTMLButtonElement | null;\n            private checkBtn!: HTMLButtonElement | null;\n            private clearBtn!: HTMLButtonElement | null;\n\n            constructor() {\n                this.notes = [\n                    { name: 'C', solfege: 'Do', position: 'below', offset: 10, octave: 4 },\n                    { name: 'C#', solfege: 'Di', position: 'below', offset: 5, octave: 4 },\n                    { name: 'D', solfege: 'Re', position: 'line-4', offset: 0, octave: 4 },\n                    { name: 'D#', solfege: 'Ri', position: 'line-4', offset: -5, octave: 4 },\n                    { name: 'E', solfege: 'Mi', position: 'space-3', offset: -10, octave: 4 },\n                    { name: 'F', solfege: 'Fa', position: 'line-3', offset: -20, octave: 4 },\n                    { name: 'F#', solfege: 'Fi', position: 'line-3', offset: -25, octave: 4 },\n                    { name: 'G', solfege: 'Sol', position: 'space-2', offset: -30, octave: 4 },\n                    { name: 'G#', solfege: 'Si', position: 'space-2', offset: -35, octave: 4 },\n                    { name: 'A', solfege: 'La', position: 'line-2', offset: -40, octave: 4 },\n                    { name: 'A#', solfege: 'Li', position: 'line-2', offset: -45, octave: 4 },\n                    { name: 'B', solfege: 'Ti', position: 'space-1', offset: -50, octave: 4 },\n                    { name: 'C', solfege: 'Do', position: 'line-1', offset: -60, octave: 5 },\n                    { name: 'C#', solfege: 'Di', position: 'space-above', offset: -70, octave: 5 }\n                ];\n\n                this.currentSequence = [];\n                this.userSequence = [];\n                this.score = 0;\n                this.level = 1;\n                this.streak = 0;\n\n                // Audio context for playing notes\n                this.audioContext = null;\n                this.initAudio();\n\n                this.initializeElements();\n                this.createStaff();\n                this.createKeyboard();\n                this.attachEventListeners();\n                this.updateDisplay();\n            }\n\n            async initAudio(): Promise<void> {\n                try {\n                    this.audioContext = new (window.AudioContext || window.webkitAudioContext)();\n                } catch (error) {\n                    console.warn('Audio context not available:', error);\n                }\n            }\n\n            initializeElements(): void {\n                this.scoreElement = document.getElementById('score');\n                this.levelElement = document.getElementById('level');\n                this.streakElement = document.getElementById('streak');\n                this.staffElement = document.getElementById('staff');\n                this.userSequenceElement = document.getElementById('userSequence');\n                this.keyboardElement = document.getElementById('keyboard');\n\n                this.newSequenceBtn = document.getElementById('newSequenceBtn');\n                this.playBtn = document.getElementById('playBtn');\n                this.checkBtn = document.getElementById('checkBtn');\n                this.clearBtn = document.getElementById('clearBtn');\n            }\n\n            createStaff(): void {\n                this.staffElement!.innerHTML = '';\n\n                // Create staff lines\n                for (let i = 0; i < 5; i++) {\n                    const line = document.createElement('div');\n                    line.className = 'staff-line';\n                    line.style.top = `${40 + i * 30}px`;\n                    this.staffElement!.appendChild(line);\n                }\n\n                // Add treble clef\n                const clef = document.createElement('div');\n                clef.className = 'clef';\n                clef.textContent = '\uD834\uDD1E';\n                this.staffElement!.appendChild(clef);\n            }\n\n            createKeyboard(): void {\n                this.keyboardElement!.innerHTML = '';\n\n                const whiteKeys = ['C', 'D', 'E', 'F', 'G', 'A', 'B'];\n                const blackKeyPositions = [0, 1, 3, 4, 5]; // Positions relative to white keys\n                const blackKeyNames = ['C#', 'D#', 'F#', 'G#', 'A#'];\n\n                // Create white keys\n                whiteKeys.forEach((note, index) => {\n                    const key = document.createElement('div');\n                    key.className = 'key white-key';\n                    key.dataset.note = note;\n                    key.textContent = note;\n                    key.addEventListener('click', () => this.handleKeyClick(note));\n                    this.keyboardElement!.appendChild(key);\n                });\n\n                // Create black keys with proper positioning\n                blackKeyNames.forEach((name, index) => {\n                    const key = document.createElement('div');\n                    key.className = 'key black-key';\n                    key.dataset.note = name;\n                    key.textContent = name;\n\n                    // Position black keys between white keys\n                    const whiteKeyWidth = 52; // 50px + 2px margin\n                    const position = blackKeyPositions[index];\n                    key.style.left = `${(position + 1) * whiteKeyWidth}px`;\n\n                    key.addEventListener('click', () => this.handleKeyClick(name));\n                    this.keyboardElement!.appendChild(key);\n                });\n            }\n\n            attachEventListeners(): void {\n                this.newSequenceBtn!.addEventListener('click', () => this.generateNewSequence());\n                this.playBtn!.addEventListener('click', () => this.playSequence());\n                this.checkBtn!.addEventListener('click', () => this.checkAnswer());\n                this.clearBtn!.addEventListener('click', () => this.clearUserInput());\n            }\n\n            generateNewSequence(): void {\n                // Reset game state\n                this.currentSequence = [];\n                this.userSequence = [];\n                this.clearStaffNotes();\n                this.clearUserInput();\n\n                // Generate 6 random notes from the do-la hexachord\n                for (let i = 0; i < 6; i++) {\n                    const randomNote = this.notes[Math.floor(Math.random() * this.notes.length)];\n                    this.currentSequence.push(randomNote);\n                }\n\n                this.displayNotesOnStaff();\n                this.playBtn.disabled = false;\n                this.checkBtn.disabled = false;\n            }\n\n            displayNotesOnStaff(): void {\n                this.clearStaffNotes();\n\n                this.currentSequence.forEach((note, index) => {\n                    const noteElement = document.createElement('div');\n                    noteElement.className = 'note';\n                    noteElement.textContent = '\u2669';\n\n                    // Position horizontally\n                    noteElement.style.left = `${120 + index * 80}px`;\n\n                    // Position vertically based on note\n                    noteElement.style.top = `${70 + note.offset}px`;\n\n                    this.staffElement!.appendChild(noteElement);\n                });\n            }\n\n            clearStaffNotes(): void {\n                const notes = this.staffElement!.querySelectorAll('.note');\n                notes.forEach((note: Element) => note.remove());\n            }\n\n            handleKeyClick(noteName: string): void {\n                // Find all possible notes with this name\n                const possibleNotes = this.notes.filter(n => n.name === noteName);\n                if (possibleNotes.length === 0) return;\n\n                // If there are multiple octaves for this note, try to match the current sequence\n                let selectedNote = possibleNotes[0]; // Default to first match\n\n                if (possibleNotes.length > 1 && this.currentSequence.length > 0) {\n                    // Try to find the note that matches the next expected note in the sequence\n                    const currentIndex = this.userSequence.length;\n                    if (currentIndex < this.currentSequence.length) {\n                        const expectedNote = this.currentSequence[currentIndex];\n                        const matchingNote = possibleNotes.find(n =>\n                            n.name === expectedNote.name &&\n                            (n.octave || 4) === (expectedNote.octave || 4)\n                        );\n                        if (matchingNote) {\n                            selectedNote = matchingNote;\n                        }\n                    }\n                }\n\n                this.userSequence.push(selectedNote);\n                this.updateUserSequenceDisplay();\n\n                // Visual feedback\n                const key = document.querySelector(`[data-note=\"${noteName}\"]`) as HTMLElement;\n                if (key) {\n                    key.classList.add('active');\n                    setTimeout(() => key.classList.remove('active'), 200);\n                }\n\n                // Play note sound\n                this.playNote(selectedNote);\n            }\n\n            updateUserSequenceDisplay(): void {\n                const sequenceText = this.userSequence.map(note =>\n                    `${note.name}${note.octave || 4} (${note.solfege})`\n                ).join(' \u2192 ');\n\n                this.userSequenceElement!.textContent = sequenceText || 'Your sequence will appear here...';\n            }\n\n            clearUserInput(): void {\n                this.userSequence = [];\n                this.updateUserSequenceDisplay();\n\n                // Remove all visual feedback from keys\n                document.querySelectorAll('.key').forEach((key: Element) => {\n                    key.classList.remove('correct', 'incorrect', 'active');\n                });\n            }\n\n            async playSequence(): Promise<void> {\n                if (!this.audioContext) return;\n\n                for (let i = 0; i < this.currentSequence.length; i++) {\n                    this.playNote(this.currentSequence[i]);\n                    await this.sleep(600); // Pause between notes\n                }\n            }\n\n            playNote(note: Note): void {\n                if (!this.audioContext) return;\n\n                // Calculate frequency based on note and octave\n                const baseFrequencies: { [key: string]: number } = {\n                    'C': 261.63,\n                    'C#': 277.18,\n                    'D': 293.66,\n                    'D#': 311.13,\n                    'E': 329.63,\n                    'F': 349.23,\n                    'F#': 369.99,\n                    'G': 392.00,\n                    'G#': 415.30,\n                    'A': 440.00,\n                    'A#': 466.16,\n                    'B': 493.88\n                };\n\n                const baseFreq = baseFrequencies[note.name];\n                if (!baseFreq) return;\n\n                // Adjust frequency for octave (C4 is base, C5 is double frequency)\n                const octaveMultiplier = Math.pow(2, (note.octave || 4) - 4);\n                const frequency = baseFreq * octaveMultiplier;\n\n                const oscillator = this.audioContext.createOscillator();\n                const gainNode = this.audioContext.createGain();\n\n                oscillator.connect(gainNode);\n                gainNode.connect(this.audioContext.destination);\n\n                oscillator.frequency.setValueAtTime(frequency, this.audioContext.currentTime);\n                oscillator.type = 'sine';\n\n                gainNode.gain.setValueAtTime(0.3, this.audioContext.currentTime);\n                gainNode.gain.exponentialRampToValueAtTime(0.01, this.audioContext.currentTime + 0.5);\n\n                oscillator.start(this.audioContext.currentTime);\n                oscillator.stop(this.audioContext.currentTime + 0.5);\n            }\n\n            sleep(ms: number): Promise<void> {\n                return new Promise(resolve => setTimeout(resolve, ms));\n            }\n\n            checkAnswer(): void {\n                if (this.userSequence.length === 0) {\n                    this.userSequenceElement!.textContent = 'Please play some notes first!';\n                    return;\n                }\n\n                const isCorrect = this.sequencesMatch();\n                this.showResults(isCorrect);\n\n                if (isCorrect) {\n                    this.score += 15 + (this.level * 5);\n                    this.streak++;\n\n                    if (this.streak % 3 === 0) {\n                        this.level++;\n                    }\n                } else {\n                    this.streak = 0;\n                }\n\n                this.updateDisplay();\n\n                // Reset for next round\n                setTimeout(() => {\n                    this.clearUserInput();\n                    this.playBtn!.disabled = true;\n                    this.checkBtn!.disabled = true;\n                }, 3000);\n            }\n\n            sequencesMatch(): boolean {\n                if (this.userSequence.length !== this.currentSequence.length) {\n                    return false;\n                }\n\n                for (let i = 0; i < this.currentSequence.length; i++) {\n                    const userNote = this.userSequence[i];\n                    const currentNote = this.currentSequence[i];\n\n                    if (userNote.name !== currentNote.name ||\n                        (userNote.octave || 4) !== (currentNote.octave || 4)) {\n                        return false;\n                    }\n                }\n\n                return true;\n            }\n\n            showResults(isCorrect: boolean): void {\n                // Show correct/incorrect feedback on keys\n                this.currentSequence.forEach((note, index) => {\n                    const key = document.querySelector(`[data-note=\"${note.name}\"]`) as HTMLElement;\n                    const userNote = this.userSequence[index];\n\n                    if (key) {\n                        if (userNote && userNote.name === note.name) {\n                            key.classList.add('correct');\n                        } else {\n                            key.classList.add('incorrect');\n                        }\n                    }\n                });\n\n                if (isCorrect) {\n                    this.userSequenceElement!.innerHTML = '\uD83C\uDF89 Perfect! You read the notes correctly!';\n                } else {\n                    const correctSequence = this.currentSequence.map(note =>\n                        `${note.name}${note.octave || 4} (${note.solfege})`\n                    ).join(' \u2192 ');\n                    this.userSequenceElement!.innerHTML = `\u274C Not quite right.<br>Correct sequence: ${correctSequence}`;\n                }\n            }\n\n            updateDisplay(): void {\n                this.scoreElement!.textContent = this.score.toString();\n                this.levelElement!.textContent = this.level.toString();\n                this.streakElement!.textContent = this.streak.toString();\n            }\n        }\n\n        // Initialize game when page loads\n        document.addEventListener('DOMContentLoaded', () => {\n            new NotationGame();\n        });\n\n// Export init function if it exists\nif (typeof window !== 'undefined') {\n  // Initialization code runs automatically\n}\n"],
  "mappings": "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",
  "names": []
}

{
  "version": 3,
  "sources": ["../js/games/rhythm-game.ts"],
  "sourcesContent": ["/**\n * rhythm-game game logic\n * Migrated from rhythm-game.html\n */\n\n// Import utilities\nimport { setCookie, getCookie } from '../storage-utils';\n\n// Declare globals that might be used\ndeclare const window: any;\ndeclare const document: any;\n\nclass RhythmGame {\n            constructor() {\n                this.currentPattern = [];\n                this.correctAnswer = 0;\n                this.score = 0;\n                this.level = 1;\n                this.streak = 0;\n                this.isPlaying = false;\n                this.tempo = 100; // BPM\n                this.gameMode = 'listen'; // 'listen' or 'read'\n\n                // Audio context for generating beats\n                this.audioContext = null;\n                this.initAudio();\n\n                this.initializeElements();\n                this.attachEventListeners();\n                this.updateDisplay();\n                this.switchMode('listen');\n            }\n\n            async initAudio() {\n                try {\n                    this.audioContext = new (window.AudioContext || window.webkitAudioContext)();\n                } catch (error) {\n                    console.warn('Audio context not available:', error);\n                }\n            }\n\n            initializeElements() {\n                this.scoreElement = document.getElementById('score');\n                this.levelElement = document.getElementById('level');\n                this.streakElement = document.getElementById('streak');\n                this.rhythmDisplay = document.getElementById('rhythmDisplay');\n                this.rhythmPattern = document.getElementById('rhythmPattern');\n                this.tempoSlider = document.getElementById('tempoSlider');\n                this.tempoValue = document.getElementById('tempoValue');\n\n                this.newRhythmBtn = document.getElementById('newRhythmBtn');\n                this.playBtn = document.getElementById('playBtn');\n                this.checkBtn = document.getElementById('checkBtn');\n\n                this.listenModeBtn = document.getElementById('listenModeBtn');\n                this.readModeBtn = document.getElementById('readModeBtn');\n\n                this.listenMode = document.getElementById('listenMode');\n                this.readMode = document.getElementById('readMode');\n                this.notationChoices = document.getElementById('notationChoices');\n                this.audioChoices = document.getElementById('audioChoices');\n                this.notationDisplay = document.getElementById('notationDisplay');\n\n                this.listenModeInstructions = document.getElementById('listenModeInstructions');\n                this.readModeInstructions = document.getElementById('readModeInstructions');\n            }\n\n            attachEventListeners() {\n                this.newRhythmBtn.addEventListener('click', () => this.generateNewRhythm());\n                this.playBtn.addEventListener('click', () => this.playCurrentRhythm());\n                this.checkBtn.addEventListener('click', () => this.checkAnswer());\n\n                this.listenModeBtn.addEventListener('click', () => this.switchMode('listen'));\n                this.readModeBtn.addEventListener('click', () => this.switchMode('read'));\n\n                this.tempoSlider.addEventListener('input', (e) => {\n                    this.tempo = parseInt(e.target.value);\n                    this.tempoValue.textContent = this.tempo;\n                });\n            }\n\n            switchMode(mode) {\n                this.gameMode = mode;\n\n                // Update mode buttons\n                this.listenModeBtn.classList.toggle('active', mode === 'listen');\n                this.readModeBtn.classList.toggle('active', mode === 'read');\n\n                // Update mode displays\n                this.listenMode.style.display = mode === 'listen' ? 'block' : 'none';\n                this.readMode.style.display = mode === 'read' ? 'block' : 'none';\n\n                // Update instructions\n                this.listenModeInstructions.style.display = mode === 'listen' ? 'block' : 'none';\n                this.readModeInstructions.style.display = mode === 'read' ? 'block' : 'none';\n\n                // Reset game state\n                this.resetGame();\n                this.rhythmDisplay.textContent = `${mode === 'listen' ? 'Listen Mode' : 'Read Mode'}: Press \"New Rhythm\" to start!`;\n            }\n\n            resetGame() {\n                this.currentPattern = [];\n                this.correctAnswer = 0;\n                this.notationChoices.style.display = 'none';\n                this.audioChoices.style.display = 'none';\n                this.notationDisplay.textContent = '';\n                this.playBtn.disabled = true;\n                this.checkBtn.disabled = true;\n                this.clearChoiceSelection();\n            }\n\n            generateNewRhythm() {\n                this.resetGame();\n\n                // Generate a 4-beat pattern\n                this.currentPattern = [];\n                const beatTypes = [0, 1, 2]; // 0=rest, 1=quarter, 2=eighth notes\n\n                for (let i = 0; i < 4; i++) {\n                    this.currentPattern.push(beatTypes[Math.floor(Math.random() * beatTypes.length)]);\n                }\n\n                // Ensure at least 2 beats are not rests\n                const nonRestBeats = this.currentPattern.filter(beat => beat !== 0).length;\n                if (nonRestBeats < 2) {\n                    this.currentPattern[0] = 1;\n                    this.currentPattern[2] = 1;\n                }\n\n                if (this.gameMode === 'listen') {\n                    this.startListenMode();\n                } else {\n                    this.startReadMode();\n                }\n\n                this.playBtn.disabled = false;\n                this.checkBtn.disabled = false;\n            }\n\n            startListenMode() {\n                this.rhythmDisplay.textContent = 'Listen to the rhythm...';\n                this.playCurrentRhythm();\n\n                // Generate notation choices after a delay\n                setTimeout(() => {\n                    this.generateNotationChoices();\n                }, 1000);\n            }\n\n            startReadMode() {\n                this.displayNotation();\n                this.generateAudioChoices();\n                this.rhythmDisplay.textContent = 'Study the notation, then choose the matching audio';\n            }\n\n            generateNotationChoices() {\n                const choices = [];\n\n                // Correct answer\n                choices.push({\n                    notation: this.patternToNotation(this.currentPattern),\n                    pattern: [...this.currentPattern],\n                    isCorrect: true\n                });\n\n                // Generate 3 incorrect options\n                for (let i = 0; i < 3; i++) {\n                    let wrongPattern;\n                    do {\n                        wrongPattern = this.generateRandomPattern();\n                    } while (this.patternsEqual(wrongPattern, this.currentPattern));\n\n                    choices.push({\n                        notation: this.patternToNotation(wrongPattern),\n                        pattern: wrongPattern,\n                        isCorrect: false\n                    });\n                }\n\n                // Shuffle choices\n                this.shuffleArray(choices);\n                this.correctAnswer = choices.findIndex(choice => choice.isCorrect);\n\n                // Display choices\n                this.displayNotationChoices(choices);\n                this.notationChoices.style.display = 'grid';\n            }\n\n            generateAudioChoices() {\n                const choices = [];\n\n                // Correct answer\n                choices.push({\n                    pattern: [...this.currentPattern],\n                    isCorrect: true,\n                    label: 'Option A'\n                });\n\n                // Generate 3 incorrect options\n                for (let i = 0; i < 3; i++) {\n                    let wrongPattern;\n                    do {\n                        wrongPattern = this.generateRandomPattern();\n                    } while (this.patternsEqual(wrongPattern, this.currentPattern));\n\n                    choices.push({\n                        pattern: wrongPattern,\n                        isCorrect: false,\n                        label: `Option ${String.fromCharCode(66 + i)}` // B, C, D\n                    });\n                }\n\n                // Shuffle choices\n                this.shuffleArray(choices);\n                this.correctAnswer = choices.findIndex(choice => choice.isCorrect);\n\n                // Store choices for audio playback\n                this.currentAudioChoices = choices;\n\n                // Display choices\n                this.displayAudioChoices(choices);\n                this.audioChoices.style.display = 'grid';\n            }\n\n            displayNotation() {\n                this.notationDisplay.textContent = this.patternToNotation(this.currentPattern);\n            }\n\n            displayNotationChoices(choices) {\n                this.notationChoices.innerHTML = '';\n                choices.forEach((choice, index) => {\n                    const button = document.createElement('div');\n                    button.className = 'choice-button';\n                    button.dataset.choice = index;\n                    button.innerHTML = `<div style=\"font-size: 1.5em; margin-bottom: 10px;\">${choice.notation}</div>`;\n                    button.addEventListener('click', () => this.selectChoice(index));\n                    this.notationChoices.appendChild(button);\n                });\n            }\n\n            displayAudioChoices(choices) {\n                this.audioChoices.innerHTML = '';\n                choices.forEach((choice, index) => {\n                    const button = document.createElement('div');\n                    button.className = 'choice-button';\n                    button.dataset.choice = index;\n                    button.innerHTML = `\n                        <div style=\"font-size: 1.2em; margin-bottom: 10px;\">${choice.label}</div>\n                        <button onclick=\"event.stopPropagation(); game.playPattern(${index})\" class=\"btn secondary\" style=\"font-size: 0.8em;\">\uD83D\uDD0A Play</button>\n                    `;\n                    button.addEventListener('click', () => this.selectChoice(index));\n                    this.audioChoices.appendChild(button);\n                });\n            }\n\n            async playPattern(choiceIndex) {\n                if (this.gameMode !== 'read' || !this.currentAudioChoices) return;\n\n                if (this.currentAudioChoices[choiceIndex]) {\n                    await this.playRhythmPattern(this.currentAudioChoices[choiceIndex].pattern);\n                }\n            }\n\n            selectChoice(choiceIndex) {\n                this.clearChoiceSelection();\n\n                const container = this.gameMode === 'listen' ? this.notationChoices : this.audioChoices;\n                const button = container.querySelector(`[data-choice=\"${choiceIndex}\"]`);\n                if (button) {\n                    button.classList.add('selected');\n                    this.selectedChoice = choiceIndex;\n                }\n            }\n\n            clearChoiceSelection() {\n                document.querySelectorAll('.choice-button').forEach(btn => {\n                    btn.classList.remove('selected', 'correct', 'incorrect');\n                });\n                this.selectedChoice = null;\n            }\n\n            patternToNotation(pattern) {\n                let notation = '';\n                for (let beat of pattern) {\n                    switch (beat) {\n                        case 0:\n                            notation += '\uD834\uDD3D '; // Rest\n                            break;\n                        case 1:\n                            notation += '\u2669 '; // Quarter note\n                            break;\n                        case 2:\n                            notation += '\u266B '; // Eighth notes\n                            break;\n                    }\n                }\n                return notation.trim();\n            }\n\n            generateRandomPattern() {\n                const pattern = [];\n                const beatTypes = [0, 1, 2];\n\n                for (let i = 0; i < 4; i++) {\n                    pattern.push(beatTypes[Math.floor(Math.random() * beatTypes.length)]);\n                }\n\n                // Ensure at least 2 beats are not rests\n                const nonRestBeats = pattern.filter(beat => beat !== 0).length;\n                if (nonRestBeats < 2) {\n                    pattern[0] = 1;\n                    pattern[2] = 1;\n                }\n\n                return pattern;\n            }\n\n            patternsEqual(a, b) {\n                return a.length === b.length && a.every((val, i) => val === b[i]);\n            }\n\n            shuffleArray(array) {\n                for (let i = array.length - 1; i > 0; i--) {\n                    const j = Math.floor(Math.random() * (i + 1));\n                    [array[i], array[j]] = [array[j], array[i]];\n                }\n            }\n\n            async playCurrentRhythm() {\n                await this.playRhythmPattern(this.currentPattern);\n            }\n\n            async playRhythmPattern(pattern) {\n                if (!this.audioContext || this.isPlaying) return;\n\n                this.isPlaying = true;\n                const originalText = this.rhythmDisplay.textContent;\n                this.rhythmDisplay.textContent = 'Playing rhythm... \uD83C\uDFB5';\n\n                const beatDuration = 60000 / this.tempo; // milliseconds per beat\n\n                for (let i = 0; i < pattern.length; i++) {\n                    const beatType = pattern[i];\n\n                    if (beatType === 1) {\n                        // Quarter note\n                        this.playBeep(440, 0.2);\n                    } else if (beatType === 2) {\n                        // Two eighth notes\n                        this.playBeep(440, 0.1);\n                        setTimeout(() => this.playBeep(440, 0.1), beatDuration / 2);\n                    }\n                    // Rest (0) - no sound\n\n                    await this.sleep(beatDuration);\n                }\n\n                this.isPlaying = false;\n                this.rhythmDisplay.textContent = originalText;\n            }\n\n            playBeep(frequency, duration) {\n                if (!this.audioContext) return;\n\n                const oscillator = this.audioContext.createOscillator();\n                const gainNode = this.audioContext.createGain();\n\n                oscillator.connect(gainNode);\n                gainNode.connect(this.audioContext.destination);\n\n                oscillator.frequency.setValueAtTime(frequency, this.audioContext.currentTime);\n                oscillator.type = 'sine';\n\n                gainNode.gain.setValueAtTime(0.3, this.audioContext.currentTime);\n                gainNode.gain.exponentialRampToValueAtTime(0.01, this.audioContext.currentTime + duration);\n\n                oscillator.start(this.audioContext.currentTime);\n                oscillator.stop(this.audioContext.currentTime + duration);\n            }\n\n            sleep(ms) {\n                return new Promise(resolve => setTimeout(resolve, ms));\n            }\n\n            checkAnswer() {\n                if (this.selectedChoice === null) {\n                    this.rhythmDisplay.textContent = 'Please select an answer first!';\n                    return;\n                }\n\n                const isCorrect = this.selectedChoice === this.correctAnswer;\n                this.showResults(isCorrect);\n\n                if (isCorrect) {\n                    this.score += 10 + (this.level * 5);\n                    this.streak++;\n\n                    if (this.streak % 5 === 0) {\n                        this.level++;\n                        this.rhythmDisplay.textContent = `\uD83C\uDF89 Level Up! Now level ${this.level}!`;\n                    }\n                } else {\n                    this.streak = 0;\n                }\n\n                this.updateDisplay();\n\n                // Reset for next round\n                setTimeout(() => {\n                    this.resetGame();\n                    this.rhythmDisplay.textContent = 'Ready for next rhythm!';\n                }, 3000);\n            }\n\n            showResults(isCorrect) {\n                const container = this.gameMode === 'listen' ? this.notationChoices : this.audioChoices;\n                const buttons = container.querySelectorAll('.choice-button');\n\n                buttons.forEach((btn, index) => {\n                    if (index === this.correctAnswer) {\n                        btn.classList.add('correct');\n                    } else if (index === this.selectedChoice && !isCorrect) {\n                        btn.classList.add('incorrect');\n                    }\n                });\n\n                if (isCorrect) {\n                    this.rhythmDisplay.textContent = '\uD83C\uDF89 Correct! Great rhythm recognition!';\n                } else {\n                    this.rhythmDisplay.textContent = '\u274C Not quite right. The correct answer is highlighted in green.';\n                }\n            }\n\n            updateDisplay() {\n                this.scoreElement.textContent = this.score;\n                this.levelElement.textContent = this.level;\n                this.streakElement.textContent = this.streak;\n            }\n        }\n\n        // Global reference for audio choice playback\n        let game;\n\n        // Initialize game when page loads\n        document.addEventListener('DOMContentLoaded', () => {\n            game = new RhythmGame();\n        });\n\n// Export init function if it exists\nif (typeof window !== 'undefined') {\n  // Initialization code runs automatically\n}\n"],
  "mappings": "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",
  "names": []
}

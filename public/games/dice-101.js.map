{
  "version": 3,
  "sources": ["../js/games/dice-101.ts"],
  "sourcesContent": ["/**\n * dice-101 game logic\n * Migrated from dice-101.html\n */\n\n// Import utilities\nimport { setCookie, getCookie } from '../storage-utils';\n\n// Declare globals that might be used\ndeclare const window: any;\ndeclare const document: any;\n\n// Declare external libraries loaded from CDN as globals\ndeclare const THREE: any;\ndeclare const OIMO: any;\n\n// Get OrbitControls and RoundedBoxGeometry from global THREE object\nconst OrbitControls = (window as any).THREE ? (window as any).THREE.OrbitControls : class {};\nconst RoundedBoxGeometry = (window as any).THREE ? (window as any).THREE.RoundedBoxGeometry : class {};\n\ninterface DiceEntity {\n  mesh: any;\n  body: any;\n  color: string;\n}\n\ninterface Player {\n  name: string;\n  color: string;\n  total: number;\n}\n\ninterface GameState {\n  numPlayers: number;\n  currentPlayerIdx: number;\n  players: Player[];\n  rolling: boolean;\n  diceEntities: DiceEntity[];\n  world: any;\n  scene: any;\n  camera: any;\n  renderer: any;\n  controls: any;\n  settleTimer: number;\n}\n\n(function(){\n  const diceContainer = document.getElementById('dice3d');\n  const hud = document.getElementById('hud');\n  const rollBtn = document.getElementById('rollBtn');\n  const stopBtn = document.getElementById('stopBtn');\n  const resetBtn = document.getElementById('resetBtn');\n  const statusToast = document.getElementById('statusToast');\n  const amountLabel = document.getElementById('amountLabel');\n  const totalLabel = document.getElementById('totalLabel');\n  const turnLabel = document.getElementById('turnLabel');\n  const playerDot = document.getElementById('playerDot');\n  const prescreen = document.getElementById('prescreen');\n  const onePlayerBtn = document.getElementById('onePlayer');\n  const twoPlayersBtn = document.getElementById('twoPlayers');\n\n  const TARGET = 101;\n  const COLORS = { pink: '#ffd1dc', blue: '#cce5ff' };\n\n  const state: GameState = {\n    numPlayers: 0,\n    currentPlayerIdx: 0,\n    players: [\n      { name: 'Player 1', color: COLORS.blue, total: 0 },\n      { name: 'Player 2', color: COLORS.pink, total: 0 }\n    ],\n    rolling: false,\n    diceEntities: [],\n    world: null,\n    scene: null,\n    camera: null,\n    renderer: null,\n    controls: null,\n    settleTimer: 0\n  };\n\n  function setStatus(text: string): void { statusToast.textContent = text; }\n\n  function init3D(): void {\n    const width = diceContainer.clientWidth;\n    const height = diceContainer.clientHeight;\n\n    const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });\n    renderer.shadowMap.enabled = true;\n    renderer.setPixelRatio(Math.min(window.devicePixelRatio||1, 2));\n    renderer.setSize(width, height);\n    diceContainer.appendChild(renderer.domElement);\n\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(50, width/height, 0.1, 1000);\n    camera.position.set(-10, 14, 14);\n    camera.lookAt(0, 0, 0);\n\n    const controls = new OrbitControls(camera, renderer.domElement);\n    controls.enablePan = false;\n    controls.enableZoom = false;\n    controls.minPolarAngle = 0.2;\n    controls.maxPolarAngle = Math.PI/2 - 0.1;\n\n    const ambient = new THREE.AmbientLight(0xffffff, 0.9);\n    scene.add(ambient);\n    const dir = new THREE.DirectionalLight(0xffffff, 1.2);\n    dir.position.set(-12, 18, 8);\n    dir.castShadow = true;\n    dir.shadow.mapSize.set(1024, 1024);\n    scene.add(dir);\n\n    const planeGeo = new THREE.PlaneGeometry(80, 80);\n    const planeMat = new THREE.MeshStandardMaterial({ color: 0x2f855a, metalness: 0.2, roughness: 0.8 });\n    const plane = new THREE.Mesh(planeGeo, planeMat);\n    plane.rotation.x = -Math.PI/2;\n    plane.position.y = -1;\n    plane.receiveShadow = true;\n    scene.add(plane);\n\n    const world = new OIMO.World({\n      timestep: 1/60,\n      iterations: 8,\n      broadphase: 2,\n      worldscale: 1,\n      random: true,\n      info: false,\n      gravity: [0, -9.8*3, 0]\n    });\n    world.add({ type: 'box', size: [160, 2, 160], pos: [0, -2, 0], rot: [0,0,0], move: false, density: 1 });\n\n    // Invisible side walls at +/- 50% of horizontal width relative to center\n    const BOUND_X = 20; // half of 50% region for 80-wide plane\n    world.add({ type: 'box', size: [1, 30, 160], pos: [-BOUND_X, 15, 0], rot: [0,0,0], move: false, density: 1 });\n    world.add({ type: 'box', size: [1, 30, 160], pos: [ BOUND_X, 15, 0], rot: [0,0,0], move: false, density: 1 });\n\n    state.scene = scene; state.camera = camera; state.renderer = renderer; state.controls = controls; state.world = world;\n\n    function animate(){\n      requestAnimationFrame(animate);\n      if (state.world){ state.world.step(1/60); }\n      for (const d of state.diceEntities){\n        const p = d.body.getPosition();\n        const q = d.body.getQuaternion();\n        d.mesh.position.set(p.x, p.y, p.z);\n        d.mesh.quaternion.set(q.x, q.y, q.z, q.w);\n      }\n      controls.update();\n      renderer.render(scene, camera);\n    }\n    requestAnimationFrame(animate);\n\n    window.addEventListener('resize', onResize);\n    function onResize(){\n      const w = diceContainer.clientWidth;\n      const h = diceContainer.clientHeight;\n      renderer.setSize(w, h);\n      camera.aspect = w/h || 1;\n      camera.updateProjectionMatrix();\n    }\n  }\n\n  function createDieFaceTexture(value: number, size: number = 256, bgColor: string = '#ffffff'): any {\n    const canvas = document.createElement('canvas');\n    canvas.width = canvas.height = size;\n    const ctx = canvas.getContext('2d');\n    if (!ctx){\n      return new THREE.CanvasTexture(canvas);\n    }\n    ctx.fillStyle = bgColor;\n    ctx.fillRect(0, 0, size, size);\n    ctx.strokeStyle = '#e2e8f0';\n    ctx.lineWidth = size * 0.06;\n    ctx.strokeRect(ctx.lineWidth/2, ctx.lineWidth/2, size-ctx.lineWidth, size-ctx.lineWidth);\n    const pipRadius = size * 0.08;\n    ctx.fillStyle = '#111827';\n    function pip(ix: number, iy: number): void {\n      const gx = [0.2, 0.5, 0.8][ix-1];\n      const gy = [0.2, 0.5, 0.8][iy-1];\n      ctx.beginPath(); ctx.arc(gx*size, gy*size, pipRadius, 0, Math.PI*2); ctx.fill();\n    }\n    const map: { [key: number]: number[][] } = {\n      1: [[2,2]], 2: [[1,1],[3,3]], 3: [[1,1],[2,2],[3,3]],\n      4: [[1,1],[3,1],[1,3],[3,3]], 5: [[1,1],[3,1],[2,2],[1,3],[3,3]], 6: [[1,1],[1,2],[1,3],[3,1],[3,2],[3,3]]\n    };\n    for (const pair of (map[value] || map[1])){ pip(pair[0], pair[1]); }\n    const texture = new THREE.CanvasTexture(canvas);\n    texture.anisotropy = 8; texture.needsUpdate = true;\n    return texture;\n  }\n\n  function createDiceMesh(bgColor: string): any {\n    const tex = {\n      1: createDieFaceTexture(1, 256, bgColor),\n      2: createDieFaceTexture(2, 256, bgColor),\n      3: createDieFaceTexture(3, 256, bgColor),\n      4: createDieFaceTexture(4, 256, bgColor),\n      5: createDieFaceTexture(5, 256, bgColor),\n      6: createDieFaceTexture(6, 256, bgColor)\n    };\n    const mopts = (t: any) => ({ map: t, roughness: 0.45, metalness: 0.05 });\n    const materials = [\n      new THREE.MeshStandardMaterial(mopts(tex[3])),\n      new THREE.MeshStandardMaterial(mopts(tex[4])),\n      new THREE.MeshStandardMaterial(mopts(tex[1])),\n      new THREE.MeshStandardMaterial(mopts(tex[6])),\n      new THREE.MeshStandardMaterial(mopts(tex[2])),\n      new THREE.MeshStandardMaterial(mopts(tex[5]))\n    ];\n    const geometry = new RoundedBoxGeometry(2.0, 2.0, 2.0, 6, 0.24);\n    const mesh = new THREE.Mesh(geometry, materials);\n    mesh.castShadow = true; mesh.receiveShadow = false;\n    return mesh;\n  }\n\n  function spawnDicePair(color: string): void {\n    for (const d of state.diceEntities){ state.scene!.remove(d.mesh); }\n    state.diceEntities = [];\n\n    const positions = [ {x:-1.4, y:14, z:0}, {x:1.4, y:15, z:0} ];\n    for (let i=0; i<2; i++){\n      const mesh = createDiceMesh(color);\n      mesh.position.set(positions[i].x, positions[i].y, positions[i].z);\n      state.scene!.add(mesh);\n\n      const body = state.world!.add({\n        type: 'box', size: [2.0,2.0,2.0], pos: [positions[i].x, positions[i].y, positions[i].z],\n        rot: [Math.random()*360, Math.random()*360, Math.random()*360],\n        move: true, density: 2, friction: 0.5, restitution: 0.75\n      });\n      state.diceEntities.push({ mesh, body, color });\n    }\n  }\n\n  function quaternionToTopValue(q: any): number {\n    const up = new THREE.Vector3(0,1,0);\n    const normals = [\n      { n: new THREE.Vector3( 1, 0, 0), v: 3 },\n      { n: new THREE.Vector3(-1, 0, 0), v: 4 },\n      { n: new THREE.Vector3( 0, 1, 0), v: 1 },\n      { n: new THREE.Vector3( 0,-1, 0), v: 6 },\n      { n: new THREE.Vector3( 0, 0, 1), v: 2 },\n      { n: new THREE.Vector3( 0, 0,-1 ), v: 5 }\n    ];\n    let best = { dot: -Infinity, value: 1 };\n    for (const f of normals){\n      const n = f.n.clone().applyQuaternion(q);\n      const d = n.dot(up);\n      if (d > best.dot){ best = { dot: d, value: f.v }; }\n    }\n    return best.value;\n  }\n\n  function getDiceValues(): number[] {\n    return state.diceEntities.map(d => {\n      const q = d.body.getQuaternion();\n      const qt = new THREE.Quaternion(q.x, q.y, q.z, q.w);\n      return quaternionToTopValue(qt);\n    });\n  }\n\n  function updateHUD(amount: number | null): void {\n    amountLabel.textContent = `Amount: ${amount || '-'}`;\n    const player = state.players[state.currentPlayerIdx];\n    totalLabel.textContent = `Total: ${player.total}`;\n    turnLabel.textContent = state.numPlayers === 2 ? (state.currentPlayerIdx===0? 'Player 1' : 'Player 2') : 'Player';\n    playerDot.className = 'chip-dot ' + (state.currentPlayerIdx===0? 'blue':'pink');\n  }\n\n  function mostFrequentValue(arr: number[]): number {\n    const counts = new Map<number, number>();\n    for (const v of arr){ counts.set(v, (counts.get(v) || 0) + 1); }\n    let bestVal = arr[0], bestCount = -1;\n    for (const [v, c] of counts){ if (c > bestCount){ bestVal = v; bestCount = c; } }\n    return bestVal;\n  }\n\n  async function readStableValues(samples: number = 7, gapMs: number = 50): Promise<number[]> {\n    const readings: number[][] = Array.from({ length: state.diceEntities.length }, () => []);\n    for (let i=0; i<samples; i++){\n      const vals = getDiceValues();\n      for (let d=0; d<vals.length; d++){ readings[d].push(vals[d]); }\n      await new Promise(r => setTimeout(r, gapMs));\n    }\n    return readings.map(list => mostFrequentValue(list));\n  }\n\n  function getBodySpeed(body: any): { lin: number; ang: number } {\n    const lv = body && body.getLinearVelocity ? body.getLinearVelocity() : { x:0, y:0, z:0 };\n    const av = body && body.getAngularVelocity ? body.getAngularVelocity() : { x:0, y:0, z:0 };\n    const lin = Math.sqrt((lv.x||0)*(lv.x||0) + (lv.y||0)*(lv.y||0) + (lv.z||0)*(lv.z||0));\n    const ang = Math.sqrt((av.x||0)*(av.x||0) + (av.y||0)*(av.y||0) + (av.z||0)*(av.z||0));\n    return { lin, ang };\n  }\n\n  function waitForSettle(timeoutMs: number = 7000, linThresh: number = 0.10, angThresh: number = 0.10, consecutiveFrames: number = 30, minActiveMs: number = 900, graceMs: number = 300): Promise<boolean> {\n    return new Promise((resolve) => {\n      let settledCount = 0;\n    const start = performance.now();\n      function tick(){\n        const now = performance.now();\n        const allSettled = state.diceEntities.length > 0 && state.diceEntities.every(d => {\n          const s = getBodySpeed(d.body);\n          return s.lin < linThresh && s.ang < angThresh;\n        });\n        if (now - start >= minActiveMs){\n          if (allSettled) settledCount++; else settledCount = 0;\n        }\n        const timedOut = now - start > timeoutMs;\n        if (settledCount >= consecutiveFrames || timedOut){\n          // post-settle grace period and recheck\n          setTimeout(() => {\n            const finallySettled = state.diceEntities.length > 0 && state.diceEntities.every(d => {\n              const s = getBodySpeed(d.body);\n              return s.lin < linThresh && s.ang < angThresh;\n            });\n            resolve(finallySettled);\n          }, graceMs);\n        } else {\n          requestAnimationFrame(tick);\n        }\n      }\n      requestAnimationFrame(tick);\n    });\n  }\n\n  function nextPlayer(): void {\n    if (state.numPlayers === 2){\n      state.currentPlayerIdx = (state.currentPlayerIdx + 1) % 2;\n      setStatus(`Turn: ${state.currentPlayerIdx===0? 'Player 1':'Player 2'}`);\n      updateHUD(0);\n    }\n  }\n\n  function endGameIfNeeded(): void {\n    const p1 = state.players[0];\n    const p2 = state.players[1];\n    if (state.numPlayers === 1){\n      if (p1.total > TARGET){ setStatus(`Bust! Over by ${p1.total - TARGET}.`); }\n      return;\n    }\n    if (state.currentPlayerIdx === 1 && (p2.total >= 0)){\n      const s1 = p1.total <= TARGET ? p1.total : -Infinity;\n      const s2 = p2.total <= TARGET ? p2.total : -Infinity;\n      if (s1 === s2){ setStatus('Tie!'); }\n      else if (s1 > s2){ setStatus('Player 1 wins!'); }\n      else { setStatus('Player 2 wins!'); }\n    }\n  }\n\n  async function startRoll(): Promise<void> {\n    if (state.rolling) return;\n    state.rolling = true;\n    rollBtn.disabled = true; stopBtn.disabled = true;\n    const player = state.players[state.currentPlayerIdx];\n    setStatus('Rolling...');\n\n    spawnDicePair(player.color);\n\n    await waitForSettle(7000, 0.08, 0.08, 36, 1100, 350);\n    const values = await readStableValues(9, 45);\n    const amount = (values[0] || 0) + (values[1] || 0);\n    player.total += amount;\n    updateHUD(amount);\n    if (player.total === TARGET){\n      setStatus('Exact 101! You win!');\n      state.rolling = false;\n      rollBtn.disabled = true; stopBtn.disabled = true;\n      return;\n    }\n    if (player.total > TARGET){\n      setStatus(`Bust! Over by ${player.total - TARGET}.`);\n      state.rolling = false;\n      if (state.numPlayers === 2){\n        if (state.currentPlayerIdx === 0){\n          nextPlayer();\n          rollBtn.disabled = false; stopBtn.disabled = false;\n        } else {\n          endGameIfNeeded();\n          rollBtn.disabled = true; stopBtn.disabled = true;\n        }\n      } else {\n        rollBtn.disabled = true; stopBtn.disabled = true;\n      }\n      return;\n    }\n    setStatus('Choose: Roll again or Stop.');\n    state.rolling = false;\n    rollBtn.disabled = false; stopBtn.disabled = false;\n  }\n\n  function stopTurn(): void {\n    if (state.rolling) return;\n    if (state.numPlayers === 2){\n      if (state.currentPlayerIdx === 0){\n        nextPlayer();\n        rollBtn.disabled = false; stopBtn.disabled = false;\n      } else {\n        endGameIfNeeded();\n        rollBtn.disabled = true; stopBtn.disabled = true;\n      }\n    } else {\n      setStatus('Stopped.');\n      rollBtn.disabled = true; stopBtn.disabled = true;\n    }\n  }\n\n  function resetGame(): void {\n    for (const d of state.diceEntities){ state.scene!.remove(d.mesh); }\n    state.diceEntities = [];\n    state.players[0].total = 0; state.players[1].total = 0;\n    state.currentPlayerIdx = 0; state.rolling = false;\n    updateHUD(0);\n    setStatus('Press Start');\n    rollBtn.disabled = false; stopBtn.disabled = false;\n    prescreen.style.display = '';\n  }\n\n  function startMode(players: number): void {\n    state.numPlayers = players;\n    prescreen.style.display = 'none';\n    setStatus(`Turn: ${players===2? 'Player 1' : 'Player'}`);\n    updateHUD(0);\n  }\n\n  onePlayerBtn.addEventListener('click', () => startMode(1));\n  twoPlayersBtn.addEventListener('click', () => startMode(2));\n  rollBtn.addEventListener('click', startRoll);\n  stopBtn.addEventListener('click', stopTurn);\n  resetBtn.addEventListener('click', resetGame);\n\n  init3D();\n  updateHUD(0);\n})();\n\n// Export init function if it exists\nif (typeof window !== 'undefined') {\n  // Initialization code runs automatically\n}\n"],
  "mappings": "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",
  "names": []
}
